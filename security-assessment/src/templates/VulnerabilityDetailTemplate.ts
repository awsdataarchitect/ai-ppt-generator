/**
 * Vulnerability Detail Template
 * 
 * Professional templates for rendering individual vulnerability findings
 * with comprehensive technical details and remediation guidance
 */

import { VulnerabilityFinding, VulnerabilitySeverity, VulnerabilityCategory } from '../types/VulnerabilityTypes';
import * as path from 'path';

export interface VulnerabilityTemplateOptions {
  readonly includeCodeSnippets: boolean;
  readonly includeEvidence: boolean;
  readonly includeReferences: boolean;
  readonly includeRemediationSteps: boolean;
  readonly maxCodeSnippetLength: number;
  readonly showConfidenceScore: boolean;
  readonly showMetadata: boolean;
}

export class VulnerabilityDetailTemplate {
  private readonly defaultOptions: VulnerabilityTemplateOptions = {
    includeCodeSnippets: true,
    includeEvidence: true,
    includeReferences: true,
    includeRemediationSteps: true,
    maxCodeSnippetLength: 200,
    showConfidenceScore: true,
    showMetadata: false
  };

  /**
   * Render detailed vulnerability finding with professional formatting
   */
  public renderVulnerabilityDetail(
    vulnerability: VulnerabilityFinding,
    index: number,
    options: Partial<VulnerabilityTemplateOptions> = {}
  ): string {
    const templateOptions = { ...this.defaultOptions, ...options };
    
    return `<details>
<summary><strong>${index}. ${vulnerability.title}</strong> ${this.getSeverityBadge(vulnerability.severity)}</summary>

${this.renderVulnerabilityHeader(vulnerability, templateOptions)}

${this.renderLocationInformation(vulnerability, templateOptions)}

${this.renderTechnicalAnalysis(vulnerability, templateOptions)}

${this.renderRiskAssessment(vulnerability)}

${this.renderRemediationPlan(vulnerability, templateOptions)}

${this.renderVerificationSteps(vulnerability)}

${this.renderReferences(vulnerability, templateOptions)}

${this.renderEvidence(vulnerability, templateOptions)}

${templateOptions.showMetadata ? this.renderMetadata(vulnerability) : ''}

</details>

`;
  }

  /**
   * Render vulnerability summary for executive reports
   */
  public renderVulnerabilitySummary(vulnerability: VulnerabilityFinding): string {
    const fileName = path.basename(vulnerability.location.filePath);
    
    return `| ${this.getSeverityIcon(vulnerability.severity)} | **${vulnerability.title}** | \`${fileName}\` | ${vulnerability.category} | ${vulnerability.remediation.timeline} |`;
  }

  /**
   * Render vulnerability card for dashboard views
   */
  public renderVulnerabilityCard(vulnerability: VulnerabilityFinding): string {
    const fileName = path.basename(vulnerability.location.filePath);
    const confidenceBar = this.createProgressBar(vulnerability.confidence, 100, 10);
    
    return `### ${this.getSeverityIcon(vulnerability.severity)} ${vulnerability.title}

**File:** \`${fileName}\` **Line:** ${vulnerability.location.lineNumber || 'N/A'} **Category:** ${vulnerability.category}

**Impact:** ${vulnerability.impact}

**Confidence:** ${vulnerability.confidence}% [${confidenceBar}]

**Remediation:** ${vulnerability.remediation.summary}

---

`;
  }

  private renderVulnerabilityHeader(
    vulnerability: VulnerabilityFinding,
    options: VulnerabilityTemplateOptions
  ): string {
    const fileName = path.basename(vulnerability.location.filePath);
    const confidenceBar = options.showConfidenceScore 
      ? this.createProgressBar(vulnerability.confidence, 100, 10, '█')
      : '';
    
    return `**📋 Vulnerability Details**

| Field | Value |
|-------|-------|
| **ID** | \`${vulnerability.id}\` |
| **Category** | ${this.getCategoryIcon(vulnerability.category)} ${vulnerability.category} |
| **Severity** | ${this.getSeverityIcon(vulnerability.severity)} ${vulnerability.severity} |
| **CWE ID** | ${vulnerability.cweId ? `[CWE-${vulnerability.cweId}](https://cwe.mitre.org/data/definitions/${vulnerability.cweId}.html)` : 'N/A'} |
| **CVE ID** | ${vulnerability.cveId ? `[${vulnerability.cveId}](https://cve.mitre.org/cgi-bin/cvename.cgi?name=${vulnerability.cveId})` : 'N/A'} |
${options.showConfidenceScore ? `| **Confidence** | ${vulnerability.confidence}% [${confidenceBar}] |` : ''}
| **Scanner** | ${vulnerability.scannerName} |
| **Discovered** | ${vulnerability.discoveredAt.toLocaleDateString()} |

`;
  }

  private renderLocationInformation(
    vulnerability: VulnerabilityFinding,
    options: VulnerabilityTemplateOptions
  ): string {
    let location = `**📍 Location Information**

- **File:** \`${vulnerability.location.filePath}\`
- **Line:** ${vulnerability.location.lineNumber || 'N/A'}
- **Column:** ${vulnerability.location.columnNumber || 'N/A'}
- **Function:** ${vulnerability.location.functionName || 'N/A'}

`;

    if (options.includeCodeSnippets && vulnerability.location.codeSnippet) {
      const snippet = vulnerability.location.codeSnippet.length > options.maxCodeSnippetLength
        ? vulnerability.location.codeSnippet.substring(0, options.maxCodeSnippetLength) + '...'
        : vulnerability.location.codeSnippet;
      
      const fileExtension = this.getFileExtension(vulnerability.location.filePath);
      
      location += `**Code Context:**
\`\`\`${fileExtension}
${snippet}
\`\`\`

`;
    }

    return location;
  }

  private renderTechnicalAnalysis(
    vulnerability: VulnerabilityFinding,
    options: VulnerabilityTemplateOptions
  ): string {
    return `**🔍 Technical Analysis**

${vulnerability.description}

**⚠️ Security Impact**

${vulnerability.impact}

`;
  }

  private renderRiskAssessment(vulnerability: VulnerabilityFinding): string {
    return `**📊 Risk Assessment**

- **Likelihood:** ${vulnerability.likelihood}
- **Business Impact:** ${this.getBusinessImpactFromSeverity(vulnerability.severity)}
- **Exploitability:** ${this.getExploitabilityFromSeverity(vulnerability.severity)}

`;
  }

  private renderRemediationPlan(
    vulnerability: VulnerabilityFinding,
    options: VulnerabilityTemplateOptions
  ): string {
    let remediation = `**🔧 Remediation Plan**

${vulnerability.remediation.summary}

`;

    if (options.includeRemediationSteps && vulnerability.remediation.steps.length > 0) {
      remediation += `**Implementation Steps:**

${vulnerability.remediation.steps.map(step => {
        let stepText = `${step.stepNumber}. ${step.description}`;
        
        if (step.codeChanges) {
          stepText += `\n   - **Code Changes:** \`${step.codeChanges}\``;
        }
        
        if (step.configurationChanges) {
          stepText += `\n   - **Configuration:** \`${step.configurationChanges}\``;
        }
        
        if (step.testingRequirements) {
          stepText += `\n   - **Testing:** ${step.testingRequirements}`;
        }
        
        return stepText;
      }).join('\n')}

**⏱️ Remediation Timeline**

- **Estimated Effort:** ${vulnerability.remediation.estimatedEffort}
- **Recommended Timeline:** ${vulnerability.remediation.timeline}
- **Priority Score:** ${vulnerability.remediation.priority}/10

`;
    }

    return remediation;
  }

  private renderVerificationSteps(vulnerability: VulnerabilityFinding): string {
    if (vulnerability.remediation.verification.length === 0) {
      return '';
    }

    return `**✅ Verification Steps**

${vulnerability.remediation.verification.map(step => `- ${step}`).join('\n')}

`;
  }

  private renderReferences(
    vulnerability: VulnerabilityFinding,
    options: VulnerabilityTemplateOptions
  ): string {
    if (!options.includeReferences || vulnerability.references.length === 0) {
      return '';
    }

    return `**📚 References**

${vulnerability.references.map(ref => {
      // Check if reference is a URL
      if (ref.startsWith('http://') || ref.startsWith('https://')) {
        return `- [${ref}](${ref})`;
      }
      return `- ${ref}`;
    }).join('\n')}

`;
  }

  private renderEvidence(
    vulnerability: VulnerabilityFinding,
    options: VulnerabilityTemplateOptions
  ): string {
    if (!options.includeEvidence || vulnerability.evidence.length === 0) {
      return '';
    }

    return `**🔬 Evidence**

${vulnerability.evidence.map(evidence => `- ${evidence}`).join('\n')}

`;
  }

  private renderMetadata(vulnerability: VulnerabilityFinding): string {
    if (!vulnerability.metadata) {
      return '';
    }

    return `**🔧 Technical Metadata**

| Field | Value |
|-------|-------|
| **Detected By** | ${vulnerability.metadata.detectedBy || 'N/A'} |
| **Scan Duration** | ${vulnerability.metadata.scanDuration ? `${vulnerability.metadata.scanDuration}ms` : 'N/A'} |
| **Coverage** | ${vulnerability.metadata.coverage ? `${vulnerability.metadata.coverage}%` : 'N/A'} |
| **Duplicate Count** | ${vulnerability.metadata.duplicateCount || 0} |

`;
  }

  // Helper methods
  private getSeverityIcon(severity: VulnerabilitySeverity): string {
    const icons = {
      [VulnerabilitySeverity.CRITICAL]: '🔴',
      [VulnerabilitySeverity.HIGH]: '🟠',
      [VulnerabilitySeverity.MEDIUM]: '🟡',
      [VulnerabilitySeverity.LOW]: '🟢',
      [VulnerabilitySeverity.INFO]: '🔵'
    };
    return icons[severity] || '⚪';
  }

  private getSeverityBadge(severity: VulnerabilitySeverity): string {
    const color = this.getSeverityColor(severity);
    return `<span style="background-color: ${color}; color: white; padding: 2px 8px; border-radius: 4px; font-size: 12px; font-weight: bold;">${severity.toUpperCase()}</span>`;
  }

  private getSeverityColor(severity: VulnerabilitySeverity): string {
    const colors = {
      [VulnerabilitySeverity.CRITICAL]: '#dc3545',
      [VulnerabilitySeverity.HIGH]: '#fd7e14',
      [VulnerabilitySeverity.MEDIUM]: '#ffc107',
      [VulnerabilitySeverity.LOW]: '#28a745',
      [VulnerabilitySeverity.INFO]: '#17a2b8'
    };
    return colors[severity] || '#6c757d';
  }

  private getCategoryIcon(category: VulnerabilityCategory): string {
    const icons = {
      [VulnerabilityCategory.XSS]: '🔗',
      [VulnerabilityCategory.CSRF]: '🔄',
      [VulnerabilityCategory.SQL_INJECTION]: '💉',
      [VulnerabilityCategory.COMMAND_INJECTION]: '⚡',
      [VulnerabilityCategory.PATH_TRAVERSAL]: '📁',
      [VulnerabilityCategory.INFORMATION_DISCLOSURE]: '📢',
      [VulnerabilityCategory.AUTHENTICATION_BYPASS]: '🔓',
      [VulnerabilityCategory.AUTHORIZATION_FAILURE]: '🚫',
      [VulnerabilityCategory.CRYPTOGRAPHIC_FAILURE]: '🔐',
      [VulnerabilityCategory.INSECURE_CONFIGURATION]: '⚙️',
      [VulnerabilityCategory.VULNERABLE_DEPENDENCY]: '📦',
      [VulnerabilityCategory.INSECURE_DESIGN]: '🏗️',
      [VulnerabilityCategory.LOGGING_FAILURE]: '📝',
      [VulnerabilityCategory.SSRF]: '🌐',
      [VulnerabilityCategory.INPUT_VALIDATION]: '✅',
      [VulnerabilityCategory.INSECURE_DESERIALIZATION]: '📋',
      [VulnerabilityCategory.HARDCODED_SECRETS]: '🔑',
      [VulnerabilityCategory.WEAK_CRYPTOGRAPHY]: '🔒',
      [VulnerabilityCategory.INSECURE_FILE_HANDLING]: '📄'
    };
    return icons[category] || '⚠️';
  }

  private createProgressBar(value: number, max: number, width: number, char: string = '█'): string {
    const filled = Math.round((value / max) * width);
    return char.repeat(filled) + '░'.repeat(width - filled);
  }

  private getFileExtension(filePath: string): string {
    const ext = path.extname(filePath).toLowerCase();
    const langMap: Record<string, string> = {
      '.ts': 'typescript',
      '.js': 'javascript',
      '.py': 'python',
      '.java': 'java',
      '.cs': 'csharp',
      '.cpp': 'cpp',
      '.c': 'c',
      '.php': 'php',
      '.rb': 'ruby',
      '.go': 'go',
      '.rs': 'rust',
      '.swift': 'swift',
      '.kt': 'kotlin',
      '.scala': 'scala',
      '.sh': 'bash',
      '.ps1': 'powershell',
      '.sql': 'sql',
      '.json': 'json',
      '.xml': 'xml',
      '.yaml': 'yaml',
      '.yml': 'yaml',
      '.html': 'html',
      '.css': 'css',
      '.scss': 'scss',
      '.less': 'less'
    };
    return langMap[ext] || 'text';
  }

  private getBusinessImpactFromSeverity(severity: VulnerabilitySeverity): string {
    const impacts = {
      [VulnerabilitySeverity.CRITICAL]: 'Severe business disruption, data breach risk, regulatory violations',
      [VulnerabilitySeverity.HIGH]: 'Significant operational impact, potential data exposure',
      [VulnerabilitySeverity.MEDIUM]: 'Moderate business risk, security posture degradation',
      [VulnerabilitySeverity.LOW]: 'Minor security concern, limited business impact',
      [VulnerabilitySeverity.INFO]: 'Informational, no direct business impact'
    };
    return impacts[severity] || 'Impact assessment required';
  }

  private getExploitabilityFromSeverity(severity: VulnerabilitySeverity): string {
    const exploitability = {
      [VulnerabilitySeverity.CRITICAL]: 'High - Easily exploitable with minimal skill required',
      [VulnerabilitySeverity.HIGH]: 'Medium-High - Exploitable with moderate technical knowledge',
      [VulnerabilitySeverity.MEDIUM]: 'Medium - Requires specific conditions or advanced knowledge',
      [VulnerabilitySeverity.LOW]: 'Low - Difficult to exploit, requires significant effort',
      [VulnerabilitySeverity.INFO]: 'N/A - Informational finding'
    };
    return exploitability[severity] || 'Assessment required';
  }
}