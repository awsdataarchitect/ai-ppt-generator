/**
 * Core types for security vulnerability assessment system
 * Defines interfaces for vulnerability findings, risk assessments, and compliance mappings
 */

export enum VulnerabilitySeverity {
  CRITICAL = 'Critical',
  HIGH = 'High',
  MEDIUM = 'Medium',
  LOW = 'Low',
  INFO = 'Info'
}

export enum VulnerabilityCategory {
  XSS = 'Cross-Site Scripting',
  CSRF = 'Cross-Site Request Forgery',
  SQL_INJECTION = 'SQL Injection',
  COMMAND_INJECTION = 'Command Injection',
  PATH_TRAVERSAL = 'Path Traversal',
  INFORMATION_DISCLOSURE = 'Information Disclosure',
  AUTHENTICATION_BYPASS = 'Authentication Bypass',
  AUTHORIZATION_FAILURE = 'Authorization Failure',
  CRYPTOGRAPHIC_FAILURE = 'Cryptographic Failure',
  INSECURE_CONFIGURATION = 'Insecure Configuration',
  VULNERABLE_DEPENDENCY = 'Vulnerable Dependency',
  INSECURE_DESIGN = 'Insecure Design',
  LOGGING_FAILURE = 'Logging Failure',
  SSRF = 'Server-Side Request Forgery',
  INPUT_VALIDATION = 'Input Validation',
  INSECURE_DESERIALIZATION = 'Insecure Deserialization',
  HARDCODED_SECRETS = 'Hardcoded Secrets',
  WEAK_CRYPTOGRAPHY = 'Weak Cryptography',
  INSECURE_FILE_HANDLING = 'Insecure File Handling'
}

export interface VulnerabilityLocation {
  readonly filePath: string;
  readonly lineNumber?: number;
  readonly columnNumber?: number;
  readonly functionName?: string;
  readonly codeSnippet?: string;
}

export interface VulnerabilityFinding {
  readonly id: string;
  readonly title: string;
  readonly description: string;
  readonly severity: VulnerabilitySeverity;
  readonly category: VulnerabilityCategory;
  readonly cweId?: string;
  readonly cveId?: string;
  readonly location: VulnerabilityLocation;
  readonly evidence: string[];
  readonly impact: string;
  readonly likelihood: string;
  readonly remediation: RemediationPlan;
  readonly references: string[];
  readonly discoveredAt: Date;
  readonly scannerName: string;
  readonly confidence: number; // 0-100 confidence score
  readonly metadata?: {
    readonly detectedBy?: string;
    readonly scanDuration?: number;
    readonly confidence?: number;
    readonly coverage?: number;
    readonly duplicateCount?: number;
  };
}

export interface RemediationPlan {
  readonly summary: string;
  readonly steps: RemediationStep[];
  readonly estimatedEffort: string;
  readonly priority: number;
  readonly timeline: string;
  readonly verification: string[];
}

export interface RemediationStep {
  readonly stepNumber: number;
  readonly description: string;
  readonly codeChanges?: string;
  readonly configurationChanges?: string;
  readonly testingRequirements?: string;
}