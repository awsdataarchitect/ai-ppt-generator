{
  "scannerId": "infrastructure-scanner",
  "scannerName": "Infrastructure Security Scanner",
  "scannerVersion": "1.0.0",
  "targetPath": "..",
  "startTime": "2025-08-28T22:47:42.476Z",
  "endTime": "2025-08-28T22:47:42.544Z",
  "filesScanned": 13,
  "vulnerabilities": [
    {
      "id": "s3-public-access-1756421262517",
      "title": "S3 Bucket with Public Access",
      "description": "S3 bucket is configured to allow public access, potentially exposing sensitive data",
      "severity": "Critical",
      "category": "Insecure Configuration",
      "cweId": "CWE-200",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 39,
        "codeSnippet": "    37:         super(scope, id, props);\n    38:         // S3 Bucket for assets\n>>> 39:         const assetsBucket = new s3.Bucket(this, 'AiPptAssets', {\n    40:             bucketName: `ai-ppt-assets-${this.account}-${this.region}`,\n    41:             removalPolicy: cdk.RemovalPolicy.DESTROY,"
      },
      "evidence": [
        "Public access configuration found in S3 bucket"
      ],
      "impact": "Sensitive data could be exposed to unauthorized users",
      "likelihood": "High - Public buckets are actively scanned by attackers",
      "remediation": {
        "summary": "Remove public access and implement proper access controls",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Remove public access settings",
            "codeChanges": "Set publicReadAccess: false and publicWriteAccess: false"
          },
          {
            "stepNumber": 2,
            "description": "Implement bucket policies with specific principals",
            "configurationChanges": "Use IAM roles and policies for access control"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 1,
        "timeline": "Immediate",
        "verification": [
          "Verify bucket is not publicly accessible",
          "Test authorized access still works"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-best-practices.html",
        "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
      ],
      "discoveredAt": "2025-08-28T22:47:42.517Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "s3-no-encryption-1756421262517",
      "title": "S3 Bucket Without Encryption",
      "description": "S3 bucket does not have server-side encryption enabled",
      "severity": "High",
      "category": "Cryptographic Failure",
      "cweId": "CWE-311",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 39,
        "codeSnippet": "    37:         super(scope, id, props);\n    38:         // S3 Bucket for assets\n>>> 39:         const assetsBucket = new s3.Bucket(this, 'AiPptAssets', {\n    40:             bucketName: `ai-ppt-assets-${this.account}-${this.region}`,\n    41:             removalPolicy: cdk.RemovalPolicy.DESTROY,"
      },
      "evidence": [
        "No encryption configuration found"
      ],
      "impact": "Data stored in bucket is not encrypted at rest",
      "likelihood": "Medium - Depends on data sensitivity",
      "remediation": {
        "summary": "Enable server-side encryption for S3 bucket",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add encryption configuration to bucket",
            "codeChanges": "Add encryption: s3.BucketEncryption.S3_MANAGED or KMS_MANAGED"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 1,
        "timeline": "Within 1 week",
        "verification": [
          "Verify encryption is enabled in AWS console"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.517Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "s3-permissive-cors-1756421262517",
      "title": "S3 Bucket with Permissive CORS Policy",
      "description": "S3 bucket CORS policy allows requests from any origin (*)",
      "severity": "Medium",
      "category": "Insecure Configuration",
      "cweId": "CWE-346",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 39,
        "codeSnippet": "    37:         super(scope, id, props);\n    38:         // S3 Bucket for assets\n>>> 39:         const assetsBucket = new s3.Bucket(this, 'AiPptAssets', {\n    40:             bucketName: `ai-ppt-assets-${this.account}-${this.region}`,\n    41:             removalPolicy: cdk.RemovalPolicy.DESTROY,"
      },
      "evidence": [
        "Wildcard (*) found in CORS allowedOrigins"
      ],
      "impact": "Could enable cross-origin attacks and data theft",
      "likelihood": "Medium - Depends on bucket usage",
      "remediation": {
        "summary": "Restrict CORS policy to specific trusted origins",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Replace wildcard with specific domain names",
            "codeChanges": "Use specific origins like [\"https://yourdomain.com\"] instead of [\"*\"]"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Test CORS functionality with restricted origins"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/AmazonS3/latest/userguide/cors.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.517Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "s3-public-access-1756421262517",
      "title": "S3 Bucket with Public Access",
      "description": "S3 bucket is configured to allow public access, potentially exposing sensitive data",
      "severity": "Critical",
      "category": "Insecure Configuration",
      "cweId": "CWE-200",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 52,
        "codeSnippet": "    50:         });\n    51:         // S3 Bucket for documents (RAG)\n>>> 52:         const documentsBucket = new s3.Bucket(this, 'AiPptDocuments', {\n    53:             bucketName: `ai-ppt-documents-${this.account}-${this.region}`,\n    54:             removalPolicy: cdk.RemovalPolicy.DESTROY,"
      },
      "evidence": [
        "Public access configuration found in S3 bucket"
      ],
      "impact": "Sensitive data could be exposed to unauthorized users",
      "likelihood": "High - Public buckets are actively scanned by attackers",
      "remediation": {
        "summary": "Remove public access and implement proper access controls",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Remove public access settings",
            "codeChanges": "Set publicReadAccess: false and publicWriteAccess: false"
          },
          {
            "stepNumber": 2,
            "description": "Implement bucket policies with specific principals",
            "configurationChanges": "Use IAM roles and policies for access control"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 1,
        "timeline": "Immediate",
        "verification": [
          "Verify bucket is not publicly accessible",
          "Test authorized access still works"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-best-practices.html",
        "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
      ],
      "discoveredAt": "2025-08-28T22:47:42.517Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "s3-no-encryption-1756421262517",
      "title": "S3 Bucket Without Encryption",
      "description": "S3 bucket does not have server-side encryption enabled",
      "severity": "High",
      "category": "Cryptographic Failure",
      "cweId": "CWE-311",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 52,
        "codeSnippet": "    50:         });\n    51:         // S3 Bucket for documents (RAG)\n>>> 52:         const documentsBucket = new s3.Bucket(this, 'AiPptDocuments', {\n    53:             bucketName: `ai-ppt-documents-${this.account}-${this.region}`,\n    54:             removalPolicy: cdk.RemovalPolicy.DESTROY,"
      },
      "evidence": [
        "No encryption configuration found"
      ],
      "impact": "Data stored in bucket is not encrypted at rest",
      "likelihood": "Medium - Depends on data sensitivity",
      "remediation": {
        "summary": "Enable server-side encryption for S3 bucket",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add encryption configuration to bucket",
            "codeChanges": "Add encryption: s3.BucketEncryption.S3_MANAGED or KMS_MANAGED"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 1,
        "timeline": "Within 1 week",
        "verification": [
          "Verify encryption is enabled in AWS console"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.517Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "s3-permissive-cors-1756421262517",
      "title": "S3 Bucket with Permissive CORS Policy",
      "description": "S3 bucket CORS policy allows requests from any origin (*)",
      "severity": "Medium",
      "category": "Insecure Configuration",
      "cweId": "CWE-346",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 52,
        "codeSnippet": "    50:         });\n    51:         // S3 Bucket for documents (RAG)\n>>> 52:         const documentsBucket = new s3.Bucket(this, 'AiPptDocuments', {\n    53:             bucketName: `ai-ppt-documents-${this.account}-${this.region}`,\n    54:             removalPolicy: cdk.RemovalPolicy.DESTROY,"
      },
      "evidence": [
        "Wildcard (*) found in CORS allowedOrigins"
      ],
      "impact": "Could enable cross-origin attacks and data theft",
      "likelihood": "Medium - Depends on bucket usage",
      "remediation": {
        "summary": "Restrict CORS policy to specific trusted origins",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Replace wildcard with specific domain names",
            "codeChanges": "Use specific origins like [\"https://yourdomain.com\"] instead of [\"*\"]"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Test CORS functionality with restricted origins"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/AmazonS3/latest/userguide/cors.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.517Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "dynamodb-no-encryption-1756421262518",
      "title": "DynamoDB Table Without Customer-Managed Encryption",
      "description": "DynamoDB table uses default encryption instead of customer-managed keys",
      "severity": "Medium",
      "category": "Cryptographic Failure",
      "cweId": "CWE-311",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 68,
        "codeSnippet": "    66:         const vectorBucketName = `ai-ppt-s3vectors-${this.account.slice(-8)}-${this.region}`;\n    67:         // DynamoDB Tables\n>>> 68:         const presentationsTable = new dynamodb.Table(this, 'PresentationsTable', {\n    69:             tableName: 'ai-ppt-presentations',\n    70:             partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },"
      },
      "evidence": [
        "No customer-managed encryption configuration found"
      ],
      "impact": "Data is encrypted but with AWS-managed keys, limiting key management control",
      "likelihood": "Low - Default encryption provides basic protection",
      "remediation": {
        "summary": "Consider using customer-managed KMS keys for enhanced security",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Evaluate if customer-managed encryption is required",
            "codeChanges": "Add encryption: dynamodb.TableEncryption.CUSTOMER_MANAGED"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Verify encryption key management meets compliance requirements"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/encryption.tutorial.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.518Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "dynamodb-no-pitr-1756421262518",
      "title": "DynamoDB Table Without Point-in-Time Recovery",
      "description": "DynamoDB table does not have point-in-time recovery enabled",
      "severity": "Low",
      "category": "Insecure Configuration",
      "cweId": "CWE-404",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 68,
        "codeSnippet": "    66:         const vectorBucketName = `ai-ppt-s3vectors-${this.account.slice(-8)}-${this.region}`;\n    67:         // DynamoDB Tables\n>>> 68:         const presentationsTable = new dynamodb.Table(this, 'PresentationsTable', {\n    69:             tableName: 'ai-ppt-presentations',\n    70:             partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },"
      },
      "evidence": [
        "No point-in-time recovery configuration found"
      ],
      "impact": "Data loss risk in case of accidental deletion or corruption",
      "likelihood": "Low - Depends on data criticality",
      "remediation": {
        "summary": "Enable point-in-time recovery for critical tables",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add point-in-time recovery configuration",
            "codeChanges": "Add pointInTimeRecovery: true"
          }
        ],
        "estimatedEffort": "15 minutes",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Verify PITR is enabled in AWS console"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.518Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "dynamodb-no-encryption-1756421262518",
      "title": "DynamoDB Table Without Customer-Managed Encryption",
      "description": "DynamoDB table uses default encryption instead of customer-managed keys",
      "severity": "Medium",
      "category": "Cryptographic Failure",
      "cweId": "CWE-311",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 81,
        "codeSnippet": "    79:         });\n    80:         // Documents Table for Knowledge Base integration\n>>> 81:         const documentsTable = new dynamodb.Table(this, 'DocumentsTable', {\n    82:             tableName: 'ai-ppt-documents',\n    83:             partitionKey: { name: 'document_id', type: dynamodb.AttributeType.STRING },"
      },
      "evidence": [
        "No customer-managed encryption configuration found"
      ],
      "impact": "Data is encrypted but with AWS-managed keys, limiting key management control",
      "likelihood": "Low - Default encryption provides basic protection",
      "remediation": {
        "summary": "Consider using customer-managed KMS keys for enhanced security",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Evaluate if customer-managed encryption is required",
            "codeChanges": "Add encryption: dynamodb.TableEncryption.CUSTOMER_MANAGED"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Verify encryption key management meets compliance requirements"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/encryption.tutorial.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.518Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "dynamodb-no-pitr-1756421262518",
      "title": "DynamoDB Table Without Point-in-Time Recovery",
      "description": "DynamoDB table does not have point-in-time recovery enabled",
      "severity": "Low",
      "category": "Insecure Configuration",
      "cweId": "CWE-404",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 81,
        "codeSnippet": "    79:         });\n    80:         // Documents Table for Knowledge Base integration\n>>> 81:         const documentsTable = new dynamodb.Table(this, 'DocumentsTable', {\n    82:             tableName: 'ai-ppt-documents',\n    83:             partitionKey: { name: 'document_id', type: dynamodb.AttributeType.STRING },"
      },
      "evidence": [
        "No point-in-time recovery configuration found"
      ],
      "impact": "Data loss risk in case of accidental deletion or corruption",
      "likelihood": "Low - Depends on data criticality",
      "remediation": {
        "summary": "Enable point-in-time recovery for critical tables",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add point-in-time recovery configuration",
            "codeChanges": "Add pointInTimeRecovery: true"
          }
        ],
        "estimatedEffort": "15 minutes",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Verify PITR is enabled in AWS console"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.518Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "cognito-weak-password-1756421262518",
      "title": "Cognito User Pool with Weak Password Policy",
      "description": "Cognito User Pool has a weak password policy that may allow easily guessable passwords",
      "severity": "Medium",
      "category": "Authentication Bypass",
      "cweId": "CWE-521",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 105,
        "codeSnippet": "    103:         });\n    104:         // Cognito User Pool\n>>> 105:         const userPool = new cognito.UserPool(this, 'AiPptUserPool', {\n    106:             userPoolName: 'ai-ppt-users',\n    107:             selfSignUpEnabled: true,"
      },
      "evidence": [
        "Weak password policy configuration found"
      ],
      "impact": "Users may choose weak passwords that are easily compromised",
      "likelihood": "Medium - Weak passwords are commonly targeted",
      "remediation": {
        "summary": "Strengthen password policy requirements",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Increase minimum password length and complexity",
            "codeChanges": "Set minLength: 12, requireSymbols: true, requireUppercase: true, requireLowercase: true, requireDigits: true"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Test password creation with new policy"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-policies.html",
        "https://owasp.org/www-project-authentication-cheat-sheet/"
      ],
      "discoveredAt": "2025-08-28T22:47:42.518Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "cognito-no-mfa-1756421262518",
      "title": "Cognito User Pool Without MFA Configuration",
      "description": "Cognito User Pool does not have multi-factor authentication configured",
      "severity": "Medium",
      "category": "Authentication Bypass",
      "cweId": "CWE-308",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 105,
        "codeSnippet": "    103:         });\n    104:         // Cognito User Pool\n>>> 105:         const userPool = new cognito.UserPool(this, 'AiPptUserPool', {\n    106:             userPoolName: 'ai-ppt-users',\n    107:             selfSignUpEnabled: true,"
      },
      "evidence": [
        "No MFA configuration found"
      ],
      "impact": "Accounts are vulnerable to credential compromise",
      "likelihood": "Medium - Single-factor authentication is less secure",
      "remediation": {
        "summary": "Configure multi-factor authentication options",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add MFA configuration to user pool",
            "codeChanges": "Add mfa: cognito.Mfa.OPTIONAL or REQUIRED"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Test MFA enrollment and authentication flow"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-mfa.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.518Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "cognito-no-mfa-1756421262518",
      "title": "Cognito User Pool Without MFA Configuration",
      "description": "Cognito User Pool does not have multi-factor authentication configured",
      "severity": "Medium",
      "category": "Authentication Bypass",
      "cweId": "CWE-308",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 142,
        "codeSnippet": "    140:             removalPolicy: cdk.RemovalPolicy.DESTROY,\n    141:         });\n>>> 142:         const userPoolClient = new cognito.UserPoolClient(this, 'AiPptUserPoolClient', {\n    143:             userPool,\n    144:             authFlows: {"
      },
      "evidence": [
        "No MFA configuration found"
      ],
      "impact": "Accounts are vulnerable to credential compromise",
      "likelihood": "Medium - Single-factor authentication is less secure",
      "remediation": {
        "summary": "Configure multi-factor authentication options",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add MFA configuration to user pool",
            "codeChanges": "Add mfa: cognito.Mfa.OPTIONAL or REQUIRED"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Test MFA enrollment and authentication flow"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-mfa.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.518Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "iam-overprivileged-1756421262518",
      "title": "Overprivileged IAM Role",
      "description": "IAM role contains wildcard permissions that grant excessive access",
      "severity": "High",
      "category": "Authorization Failure",
      "cweId": "CWE-269",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 152,
        "codeSnippet": "    150:         });\n    151:         // IAM Role for Bedrock Knowledge Base with S3 vectors\n>>> 152:         const knowledgeBaseRole = new iam.Role(this, 'KnowledgeBaseRole', {\n    153:             assumedBy: new iam.ServicePrincipal('bedrock.amazonaws.com'),\n    154:             inlinePolicies: {"
      },
      "evidence": [
        "Wildcard (*) found in IAM policy actions or resources"
      ],
      "impact": "Excessive permissions could lead to privilege escalation and unauthorized access to AWS resources",
      "likelihood": "High - Overprivileged roles are commonly exploited",
      "remediation": {
        "summary": "Apply principle of least privilege to IAM roles",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Review the specific permissions required for this role",
            "codeChanges": "Replace wildcard (*) with specific actions and resources"
          },
          {
            "stepNumber": 2,
            "description": "Use AWS IAM Access Analyzer to identify unused permissions",
            "testingRequirements": "Test application functionality with restricted permissions"
          }
        ],
        "estimatedEffort": "2-4 hours",
        "priority": 1,
        "timeline": "Within 1 week",
        "verification": [
          "Run IAM policy simulator",
          "Verify application functionality"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html",
        "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control"
      ],
      "discoveredAt": "2025-08-28T22:47:42.518Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "iam-missing-conditions-1756421262518",
      "title": "IAM Role Missing Assume Role Conditions",
      "description": "IAM role lacks conditions in assume role policy, potentially allowing unauthorized access",
      "severity": "Medium",
      "category": "Authorization Failure",
      "cweId": "CWE-284",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 152,
        "codeSnippet": "    150:         });\n    151:         // IAM Role for Bedrock Knowledge Base with S3 vectors\n>>> 152:         const knowledgeBaseRole = new iam.Role(this, 'KnowledgeBaseRole', {\n    153:             assumedBy: new iam.ServicePrincipal('bedrock.amazonaws.com'),\n    154:             inlinePolicies: {"
      },
      "evidence": [
        "No conditions found in assume role policy"
      ],
      "impact": "Role could be assumed by unintended principals",
      "likelihood": "Medium - Depends on role usage and exposure",
      "remediation": {
        "summary": "Add appropriate conditions to assume role policy",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add conditions to restrict when and how the role can be assumed",
            "codeChanges": "Add conditions like StringEquals, IpAddress, or DateGreaterThan"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Test role assumption with and without conditions"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.518Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "lambda-long-timeout-1756421262519",
      "title": "Lambda Function with Excessive Timeout",
      "description": "Lambda function has a very long timeout that could impact cost and security",
      "severity": "Low",
      "category": "Insecure Configuration",
      "cweId": "CWE-400",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 221,
        "codeSnippet": "    219:         });\n    220:         // Custom Lambda function to create Knowledge Base with S3 vectors\n>>> 221:         const knowledgeBaseCustomResourceFunction = new lambda.Function(this, 'KnowledgeBaseCustomResourceFunction', {\n    222:             runtime: lambda.Runtime.PYTHON_3_12,\n    223:             handler: 'index.handler',"
      },
      "evidence": [
        "Long timeout configuration found"
      ],
      "impact": "Could lead to increased costs and potential DoS if function hangs",
      "likelihood": "Low - Depends on function implementation",
      "remediation": {
        "summary": "Review and optimize Lambda timeout settings",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Analyze actual function execution time and set appropriate timeout",
            "codeChanges": "Reduce timeout to minimum required duration"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Monitor function execution times and adjust timeout accordingly"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-timeout-console"
      ],
      "discoveredAt": "2025-08-28T22:47:42.519Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "lambda-long-timeout-1756421262519",
      "title": "Lambda Function with Excessive Timeout",
      "description": "Lambda function has a very long timeout that could impact cost and security",
      "severity": "Low",
      "category": "Insecure Configuration",
      "cweId": "CWE-400",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 298,
        "codeSnippet": "    296:         // KNOWLEDGE BASE MANAGER LAMBDA\n    297:         // ============================================================================\n>>> 298:         const knowledgeBaseManagerFunction = new lambda.Function(this, 'KnowledgeBaseManagerFunction', {\n    299:             runtime: lambda.Runtime.PYTHON_3_11,\n    300:             handler: 'knowledge_base_manager.lambda_handler',"
      },
      "evidence": [
        "Long timeout configuration found"
      ],
      "impact": "Could lead to increased costs and potential DoS if function hangs",
      "likelihood": "Low - Depends on function implementation",
      "remediation": {
        "summary": "Review and optimize Lambda timeout settings",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Analyze actual function execution time and set appropriate timeout",
            "codeChanges": "Reduce timeout to minimum required duration"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Monitor function execution times and adjust timeout accordingly"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-timeout-console"
      ],
      "discoveredAt": "2025-08-28T22:47:42.519Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "iam-overprivileged-1756421262519",
      "title": "Overprivileged IAM Role",
      "description": "IAM role contains wildcard permissions that grant excessive access",
      "severity": "High",
      "category": "Authorization Failure",
      "cweId": "CWE-269",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 360,
        "codeSnippet": "    358:         }));\n    359:         // IAM Role for Lambda functions with enhanced permissions for RAG\n>>> 360:         const lambdaRole = new iam.Role(this, 'AiPptLambdaRole', {\n    361:             assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n    362:             managedPolicies: ["
      },
      "evidence": [
        "Wildcard (*) found in IAM policy actions or resources"
      ],
      "impact": "Excessive permissions could lead to privilege escalation and unauthorized access to AWS resources",
      "likelihood": "High - Overprivileged roles are commonly exploited",
      "remediation": {
        "summary": "Apply principle of least privilege to IAM roles",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Review the specific permissions required for this role",
            "codeChanges": "Replace wildcard (*) with specific actions and resources"
          },
          {
            "stepNumber": 2,
            "description": "Use AWS IAM Access Analyzer to identify unused permissions",
            "testingRequirements": "Test application functionality with restricted permissions"
          }
        ],
        "estimatedEffort": "2-4 hours",
        "priority": 1,
        "timeline": "Within 1 week",
        "verification": [
          "Run IAM policy simulator",
          "Verify application functionality"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html",
        "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control"
      ],
      "discoveredAt": "2025-08-28T22:47:42.519Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "iam-missing-conditions-1756421262519",
      "title": "IAM Role Missing Assume Role Conditions",
      "description": "IAM role lacks conditions in assume role policy, potentially allowing unauthorized access",
      "severity": "Medium",
      "category": "Authorization Failure",
      "cweId": "CWE-284",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 360,
        "codeSnippet": "    358:         }));\n    359:         // IAM Role for Lambda functions with enhanced permissions for RAG\n>>> 360:         const lambdaRole = new iam.Role(this, 'AiPptLambdaRole', {\n    361:             assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n    362:             managedPolicies: ["
      },
      "evidence": [
        "No conditions found in assume role policy"
      ],
      "impact": "Role could be assumed by unintended principals",
      "likelihood": "Medium - Depends on role usage and exposure",
      "remediation": {
        "summary": "Add appropriate conditions to assume role policy",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add conditions to restrict when and how the role can be assumed",
            "codeChanges": "Add conditions like StringEquals, IpAddress, or DateGreaterThan"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Test role assumption with and without conditions"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.519Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "lambda-long-timeout-1756421262519",
      "title": "Lambda Function with Excessive Timeout",
      "description": "Lambda function has a very long timeout that could impact cost and security",
      "severity": "Low",
      "category": "Insecure Configuration",
      "cweId": "CWE-400",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 469,
        "codeSnippet": "    467:         };\n    468:         // RAG Presentation Resolver Lambda Function\n>>> 469:         const ragPresentationFunction = new lambda.Function(this, 'RagPresentationFunction', {\n    470:             runtime: lambda.Runtime.PYTHON_3_11,\n    471:             handler: 'rag_presentation_resolver.lambda_handler',"
      },
      "evidence": [
        "Long timeout configuration found"
      ],
      "impact": "Could lead to increased costs and potential DoS if function hangs",
      "likelihood": "Low - Depends on function implementation",
      "remediation": {
        "summary": "Review and optimize Lambda timeout settings",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Analyze actual function execution time and set appropriate timeout",
            "codeChanges": "Reduce timeout to minimum required duration"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Monitor function execution times and adjust timeout accordingly"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-timeout-console"
      ],
      "discoveredAt": "2025-08-28T22:47:42.519Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "lambda-long-timeout-1756421262520",
      "title": "Lambda Function with Excessive Timeout",
      "description": "Lambda function has a very long timeout that could impact cost and security",
      "severity": "Low",
      "category": "Insecure Configuration",
      "cweId": "CWE-400",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.js",
        "lineNumber": 524,
        "codeSnippet": "    522:         knowledgeBaseManagerFunction.grantInvoke(s3UploadHandlerFunction);\n    523:         // Document Processor V2 Lambda Function (for S3 events)\n>>> 524:         const documentProcessorV2Function = new lambda.Function(this, 'DocumentProcessorV2Function', {\n    525:             runtime: lambda.Runtime.PYTHON_3_11,\n    526:             handler: 'document_processor.lambda_handler',"
      },
      "evidence": [
        "Long timeout configuration found"
      ],
      "impact": "Could lead to increased costs and potential DoS if function hangs",
      "likelihood": "Low - Depends on function implementation",
      "remediation": {
        "summary": "Review and optimize Lambda timeout settings",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Analyze actual function execution time and set appropriate timeout",
            "codeChanges": "Reduce timeout to minimum required duration"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Monitor function execution times and adjust timeout accordingly"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-timeout-console"
      ],
      "discoveredAt": "2025-08-28T22:47:42.520Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "s3-public-access-1756421262523",
      "title": "S3 Bucket with Public Access",
      "description": "S3 bucket is configured to allow public access, potentially exposing sensitive data",
      "severity": "Critical",
      "category": "Insecure Configuration",
      "cweId": "CWE-200",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 17,
        "codeSnippet": "    15: \n    16:     // S3 Bucket for assets\n>>> 17:     const assetsBucket = new s3.Bucket(this, 'AiPptAssets', {\n    18:       bucketName: `ai-ppt-assets-${this.account}-${this.region}`,\n    19:       removalPolicy: cdk.RemovalPolicy.DESTROY,"
      },
      "evidence": [
        "Public access configuration found in S3 bucket"
      ],
      "impact": "Sensitive data could be exposed to unauthorized users",
      "likelihood": "High - Public buckets are actively scanned by attackers",
      "remediation": {
        "summary": "Remove public access and implement proper access controls",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Remove public access settings",
            "codeChanges": "Set publicReadAccess: false and publicWriteAccess: false"
          },
          {
            "stepNumber": 2,
            "description": "Implement bucket policies with specific principals",
            "configurationChanges": "Use IAM roles and policies for access control"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 1,
        "timeline": "Immediate",
        "verification": [
          "Verify bucket is not publicly accessible",
          "Test authorized access still works"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-best-practices.html",
        "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
      ],
      "discoveredAt": "2025-08-28T22:47:42.523Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "s3-no-encryption-1756421262523",
      "title": "S3 Bucket Without Encryption",
      "description": "S3 bucket does not have server-side encryption enabled",
      "severity": "High",
      "category": "Cryptographic Failure",
      "cweId": "CWE-311",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 17,
        "codeSnippet": "    15: \n    16:     // S3 Bucket for assets\n>>> 17:     const assetsBucket = new s3.Bucket(this, 'AiPptAssets', {\n    18:       bucketName: `ai-ppt-assets-${this.account}-${this.region}`,\n    19:       removalPolicy: cdk.RemovalPolicy.DESTROY,"
      },
      "evidence": [
        "No encryption configuration found"
      ],
      "impact": "Data stored in bucket is not encrypted at rest",
      "likelihood": "Medium - Depends on data sensitivity",
      "remediation": {
        "summary": "Enable server-side encryption for S3 bucket",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add encryption configuration to bucket",
            "codeChanges": "Add encryption: s3.BucketEncryption.S3_MANAGED or KMS_MANAGED"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 1,
        "timeline": "Within 1 week",
        "verification": [
          "Verify encryption is enabled in AWS console"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.524Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "s3-permissive-cors-1756421262524",
      "title": "S3 Bucket with Permissive CORS Policy",
      "description": "S3 bucket CORS policy allows requests from any origin (*)",
      "severity": "Medium",
      "category": "Insecure Configuration",
      "cweId": "CWE-346",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 17,
        "codeSnippet": "    15: \n    16:     // S3 Bucket for assets\n>>> 17:     const assetsBucket = new s3.Bucket(this, 'AiPptAssets', {\n    18:       bucketName: `ai-ppt-assets-${this.account}-${this.region}`,\n    19:       removalPolicy: cdk.RemovalPolicy.DESTROY,"
      },
      "evidence": [
        "Wildcard (*) found in CORS allowedOrigins"
      ],
      "impact": "Could enable cross-origin attacks and data theft",
      "likelihood": "Medium - Depends on bucket usage",
      "remediation": {
        "summary": "Restrict CORS policy to specific trusted origins",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Replace wildcard with specific domain names",
            "codeChanges": "Use specific origins like [\"https://yourdomain.com\"] instead of [\"*\"]"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Test CORS functionality with restricted origins"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/AmazonS3/latest/userguide/cors.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.524Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "s3-public-access-1756421262524",
      "title": "S3 Bucket with Public Access",
      "description": "S3 bucket is configured to allow public access, potentially exposing sensitive data",
      "severity": "Critical",
      "category": "Insecure Configuration",
      "cweId": "CWE-200",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 31,
        "codeSnippet": "    29: \n    30:     // S3 Bucket for documents (RAG)\n>>> 31:     const documentsBucket = new s3.Bucket(this, 'AiPptDocuments', {\n    32:       bucketName: `ai-ppt-documents-${this.account}-${this.region}`,\n    33:       removalPolicy: cdk.RemovalPolicy.DESTROY,"
      },
      "evidence": [
        "Public access configuration found in S3 bucket"
      ],
      "impact": "Sensitive data could be exposed to unauthorized users",
      "likelihood": "High - Public buckets are actively scanned by attackers",
      "remediation": {
        "summary": "Remove public access and implement proper access controls",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Remove public access settings",
            "codeChanges": "Set publicReadAccess: false and publicWriteAccess: false"
          },
          {
            "stepNumber": 2,
            "description": "Implement bucket policies with specific principals",
            "configurationChanges": "Use IAM roles and policies for access control"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 1,
        "timeline": "Immediate",
        "verification": [
          "Verify bucket is not publicly accessible",
          "Test authorized access still works"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-control-best-practices.html",
        "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration"
      ],
      "discoveredAt": "2025-08-28T22:47:42.524Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "s3-no-encryption-1756421262524",
      "title": "S3 Bucket Without Encryption",
      "description": "S3 bucket does not have server-side encryption enabled",
      "severity": "High",
      "category": "Cryptographic Failure",
      "cweId": "CWE-311",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 31,
        "codeSnippet": "    29: \n    30:     // S3 Bucket for documents (RAG)\n>>> 31:     const documentsBucket = new s3.Bucket(this, 'AiPptDocuments', {\n    32:       bucketName: `ai-ppt-documents-${this.account}-${this.region}`,\n    33:       removalPolicy: cdk.RemovalPolicy.DESTROY,"
      },
      "evidence": [
        "No encryption configuration found"
      ],
      "impact": "Data stored in bucket is not encrypted at rest",
      "likelihood": "Medium - Depends on data sensitivity",
      "remediation": {
        "summary": "Enable server-side encryption for S3 bucket",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add encryption configuration to bucket",
            "codeChanges": "Add encryption: s3.BucketEncryption.S3_MANAGED or KMS_MANAGED"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 1,
        "timeline": "Within 1 week",
        "verification": [
          "Verify encryption is enabled in AWS console"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.524Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "s3-permissive-cors-1756421262524",
      "title": "S3 Bucket with Permissive CORS Policy",
      "description": "S3 bucket CORS policy allows requests from any origin (*)",
      "severity": "Medium",
      "category": "Insecure Configuration",
      "cweId": "CWE-346",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 31,
        "codeSnippet": "    29: \n    30:     // S3 Bucket for documents (RAG)\n>>> 31:     const documentsBucket = new s3.Bucket(this, 'AiPptDocuments', {\n    32:       bucketName: `ai-ppt-documents-${this.account}-${this.region}`,\n    33:       removalPolicy: cdk.RemovalPolicy.DESTROY,"
      },
      "evidence": [
        "Wildcard (*) found in CORS allowedOrigins"
      ],
      "impact": "Could enable cross-origin attacks and data theft",
      "likelihood": "Medium - Depends on bucket usage",
      "remediation": {
        "summary": "Restrict CORS policy to specific trusted origins",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Replace wildcard with specific domain names",
            "codeChanges": "Use specific origins like [\"https://yourdomain.com\"] instead of [\"*\"]"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Test CORS functionality with restricted origins"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/AmazonS3/latest/userguide/cors.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.524Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "dynamodb-no-encryption-1756421262524",
      "title": "DynamoDB Table Without Customer-Managed Encryption",
      "description": "DynamoDB table uses default encryption instead of customer-managed keys",
      "severity": "Medium",
      "category": "Cryptographic Failure",
      "cweId": "CWE-311",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 49,
        "codeSnippet": "    47: \n    48:     // DynamoDB Tables\n>>> 49:     const presentationsTable = new dynamodb.Table(this, 'PresentationsTable', {\n    50:       tableName: 'ai-ppt-presentations',\n    51:       partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },"
      },
      "evidence": [
        "No customer-managed encryption configuration found"
      ],
      "impact": "Data is encrypted but with AWS-managed keys, limiting key management control",
      "likelihood": "Low - Default encryption provides basic protection",
      "remediation": {
        "summary": "Consider using customer-managed KMS keys for enhanced security",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Evaluate if customer-managed encryption is required",
            "codeChanges": "Add encryption: dynamodb.TableEncryption.CUSTOMER_MANAGED"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Verify encryption key management meets compliance requirements"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/encryption.tutorial.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.524Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "dynamodb-no-pitr-1756421262524",
      "title": "DynamoDB Table Without Point-in-Time Recovery",
      "description": "DynamoDB table does not have point-in-time recovery enabled",
      "severity": "Low",
      "category": "Insecure Configuration",
      "cweId": "CWE-404",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 49,
        "codeSnippet": "    47: \n    48:     // DynamoDB Tables\n>>> 49:     const presentationsTable = new dynamodb.Table(this, 'PresentationsTable', {\n    50:       tableName: 'ai-ppt-presentations',\n    51:       partitionKey: { name: 'id', type: dynamodb.AttributeType.STRING },"
      },
      "evidence": [
        "No point-in-time recovery configuration found"
      ],
      "impact": "Data loss risk in case of accidental deletion or corruption",
      "likelihood": "Low - Depends on data criticality",
      "remediation": {
        "summary": "Enable point-in-time recovery for critical tables",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add point-in-time recovery configuration",
            "codeChanges": "Add pointInTimeRecovery: true"
          }
        ],
        "estimatedEffort": "15 minutes",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Verify PITR is enabled in AWS console"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.524Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "dynamodb-no-encryption-1756421262524",
      "title": "DynamoDB Table Without Customer-Managed Encryption",
      "description": "DynamoDB table uses default encryption instead of customer-managed keys",
      "severity": "Medium",
      "category": "Cryptographic Failure",
      "cweId": "CWE-311",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 64,
        "codeSnippet": "    62: \n    63:     // Documents Table for Knowledge Base integration\n>>> 64:     const documentsTable = new dynamodb.Table(this, 'DocumentsTable', {\n    65:       tableName: 'ai-ppt-documents',\n    66:       partitionKey: { name: 'document_id', type: dynamodb.AttributeType.STRING },"
      },
      "evidence": [
        "No customer-managed encryption configuration found"
      ],
      "impact": "Data is encrypted but with AWS-managed keys, limiting key management control",
      "likelihood": "Low - Default encryption provides basic protection",
      "remediation": {
        "summary": "Consider using customer-managed KMS keys for enhanced security",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Evaluate if customer-managed encryption is required",
            "codeChanges": "Add encryption: dynamodb.TableEncryption.CUSTOMER_MANAGED"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Verify encryption key management meets compliance requirements"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/encryption.tutorial.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.524Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "dynamodb-no-pitr-1756421262524",
      "title": "DynamoDB Table Without Point-in-Time Recovery",
      "description": "DynamoDB table does not have point-in-time recovery enabled",
      "severity": "Low",
      "category": "Insecure Configuration",
      "cweId": "CWE-404",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 64,
        "codeSnippet": "    62: \n    63:     // Documents Table for Knowledge Base integration\n>>> 64:     const documentsTable = new dynamodb.Table(this, 'DocumentsTable', {\n    65:       tableName: 'ai-ppt-documents',\n    66:       partitionKey: { name: 'document_id', type: dynamodb.AttributeType.STRING },"
      },
      "evidence": [
        "No point-in-time recovery configuration found"
      ],
      "impact": "Data loss risk in case of accidental deletion or corruption",
      "likelihood": "Low - Depends on data criticality",
      "remediation": {
        "summary": "Enable point-in-time recovery for critical tables",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add point-in-time recovery configuration",
            "codeChanges": "Add pointInTimeRecovery: true"
          }
        ],
        "estimatedEffort": "15 minutes",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Verify PITR is enabled in AWS console"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.524Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "cognito-weak-password-1756421262524",
      "title": "Cognito User Pool with Weak Password Policy",
      "description": "Cognito User Pool has a weak password policy that may allow easily guessable passwords",
      "severity": "Medium",
      "category": "Authentication Bypass",
      "cweId": "CWE-521",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 92,
        "codeSnippet": "    90: \n    91:     // Cognito User Pool\n>>> 92:     const userPool = new cognito.UserPool(this, 'AiPptUserPool', {\n    93:       userPoolName: 'ai-ppt-users',\n    94:       selfSignUpEnabled: true,"
      },
      "evidence": [
        "Weak password policy configuration found"
      ],
      "impact": "Users may choose weak passwords that are easily compromised",
      "likelihood": "Medium - Weak passwords are commonly targeted",
      "remediation": {
        "summary": "Strengthen password policy requirements",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Increase minimum password length and complexity",
            "codeChanges": "Set minLength: 12, requireSymbols: true, requireUppercase: true, requireLowercase: true, requireDigits: true"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Test password creation with new policy"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-policies.html",
        "https://owasp.org/www-project-authentication-cheat-sheet/"
      ],
      "discoveredAt": "2025-08-28T22:47:42.524Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "cognito-no-mfa-1756421262524",
      "title": "Cognito User Pool Without MFA Configuration",
      "description": "Cognito User Pool does not have multi-factor authentication configured",
      "severity": "Medium",
      "category": "Authentication Bypass",
      "cweId": "CWE-308",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 92,
        "codeSnippet": "    90: \n    91:     // Cognito User Pool\n>>> 92:     const userPool = new cognito.UserPool(this, 'AiPptUserPool', {\n    93:       userPoolName: 'ai-ppt-users',\n    94:       selfSignUpEnabled: true,"
      },
      "evidence": [
        "No MFA configuration found"
      ],
      "impact": "Accounts are vulnerable to credential compromise",
      "likelihood": "Medium - Single-factor authentication is less secure",
      "remediation": {
        "summary": "Configure multi-factor authentication options",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add MFA configuration to user pool",
            "codeChanges": "Add mfa: cognito.Mfa.OPTIONAL or REQUIRED"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Test MFA enrollment and authentication flow"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-mfa.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.524Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "cognito-no-mfa-1756421262524",
      "title": "Cognito User Pool Without MFA Configuration",
      "description": "Cognito User Pool does not have multi-factor authentication configured",
      "severity": "Medium",
      "category": "Authentication Bypass",
      "cweId": "CWE-308",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 130,
        "codeSnippet": "    128:     });\n    129: \n>>> 130:     const userPoolClient = new cognito.UserPoolClient(this, 'AiPptUserPoolClient', {\n    131:       userPool,\n    132:       authFlows: {"
      },
      "evidence": [
        "No MFA configuration found"
      ],
      "impact": "Accounts are vulnerable to credential compromise",
      "likelihood": "Medium - Single-factor authentication is less secure",
      "remediation": {
        "summary": "Configure multi-factor authentication options",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add MFA configuration to user pool",
            "codeChanges": "Add mfa: cognito.Mfa.OPTIONAL or REQUIRED"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Test MFA enrollment and authentication flow"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-mfa.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.524Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "iam-overprivileged-1756421262524",
      "title": "Overprivileged IAM Role",
      "description": "IAM role contains wildcard permissions that grant excessive access",
      "severity": "High",
      "category": "Authorization Failure",
      "cweId": "CWE-269",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 141,
        "codeSnippet": "    139: \n    140:     // IAM Role for Bedrock Knowledge Base with S3 vectors\n>>> 141:     const knowledgeBaseRole = new iam.Role(this, 'KnowledgeBaseRole', {\n    142:       assumedBy: new iam.ServicePrincipal('bedrock.amazonaws.com'),\n    143:       inlinePolicies: {"
      },
      "evidence": [
        "Wildcard (*) found in IAM policy actions or resources"
      ],
      "impact": "Excessive permissions could lead to privilege escalation and unauthorized access to AWS resources",
      "likelihood": "High - Overprivileged roles are commonly exploited",
      "remediation": {
        "summary": "Apply principle of least privilege to IAM roles",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Review the specific permissions required for this role",
            "codeChanges": "Replace wildcard (*) with specific actions and resources"
          },
          {
            "stepNumber": 2,
            "description": "Use AWS IAM Access Analyzer to identify unused permissions",
            "testingRequirements": "Test application functionality with restricted permissions"
          }
        ],
        "estimatedEffort": "2-4 hours",
        "priority": 1,
        "timeline": "Within 1 week",
        "verification": [
          "Run IAM policy simulator",
          "Verify application functionality"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html",
        "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control"
      ],
      "discoveredAt": "2025-08-28T22:47:42.524Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "iam-missing-conditions-1756421262524",
      "title": "IAM Role Missing Assume Role Conditions",
      "description": "IAM role lacks conditions in assume role policy, potentially allowing unauthorized access",
      "severity": "Medium",
      "category": "Authorization Failure",
      "cweId": "CWE-284",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 141,
        "codeSnippet": "    139: \n    140:     // IAM Role for Bedrock Knowledge Base with S3 vectors\n>>> 141:     const knowledgeBaseRole = new iam.Role(this, 'KnowledgeBaseRole', {\n    142:       assumedBy: new iam.ServicePrincipal('bedrock.amazonaws.com'),\n    143:       inlinePolicies: {"
      },
      "evidence": [
        "No conditions found in assume role policy"
      ],
      "impact": "Role could be assumed by unintended principals",
      "likelihood": "Medium - Depends on role usage and exposure",
      "remediation": {
        "summary": "Add appropriate conditions to assume role policy",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add conditions to restrict when and how the role can be assumed",
            "codeChanges": "Add conditions like StringEquals, IpAddress, or DateGreaterThan"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Test role assumption with and without conditions"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.524Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "lambda-long-timeout-1756421262524",
      "title": "Lambda Function with Excessive Timeout",
      "description": "Lambda function has a very long timeout that could impact cost and security",
      "severity": "Low",
      "category": "Insecure Configuration",
      "cweId": "CWE-400",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 234,
        "codeSnippet": "    232:     // ============================================================================\n    233:     \n>>> 234:     const knowledgeBaseManagerFunction = new lambda.Function(this, 'KnowledgeBaseManagerFunction', {\n    235:       runtime: lambda.Runtime.PYTHON_3_11,\n    236:       handler: 'knowledge_base_manager.lambda_handler',"
      },
      "evidence": [
        "Long timeout configuration found"
      ],
      "impact": "Could lead to increased costs and potential DoS if function hangs",
      "likelihood": "Low - Depends on function implementation",
      "remediation": {
        "summary": "Review and optimize Lambda timeout settings",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Analyze actual function execution time and set appropriate timeout",
            "codeChanges": "Reduce timeout to minimum required duration"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Monitor function execution times and adjust timeout accordingly"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-timeout-console"
      ],
      "discoveredAt": "2025-08-28T22:47:42.524Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "iam-overprivileged-1756421262524",
      "title": "Overprivileged IAM Role",
      "description": "IAM role contains wildcard permissions that grant excessive access",
      "severity": "High",
      "category": "Authorization Failure",
      "cweId": "CWE-269",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 322,
        "codeSnippet": "    320: \n    321:     // IAM Role for Lambda functions with enhanced permissions for RAG\n>>> 322:     const lambdaRole = new iam.Role(this, 'AiPptLambdaRole', {\n    323:       assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n    324:       managedPolicies: ["
      },
      "evidence": [
        "Wildcard (*) found in IAM policy actions or resources"
      ],
      "impact": "Excessive permissions could lead to privilege escalation and unauthorized access to AWS resources",
      "likelihood": "High - Overprivileged roles are commonly exploited",
      "remediation": {
        "summary": "Apply principle of least privilege to IAM roles",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Review the specific permissions required for this role",
            "codeChanges": "Replace wildcard (*) with specific actions and resources"
          },
          {
            "stepNumber": 2,
            "description": "Use AWS IAM Access Analyzer to identify unused permissions",
            "testingRequirements": "Test application functionality with restricted permissions"
          }
        ],
        "estimatedEffort": "2-4 hours",
        "priority": 1,
        "timeline": "Within 1 week",
        "verification": [
          "Run IAM policy simulator",
          "Verify application functionality"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html",
        "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control"
      ],
      "discoveredAt": "2025-08-28T22:47:42.524Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "iam-missing-conditions-1756421262524",
      "title": "IAM Role Missing Assume Role Conditions",
      "description": "IAM role lacks conditions in assume role policy, potentially allowing unauthorized access",
      "severity": "Medium",
      "category": "Authorization Failure",
      "cweId": "CWE-284",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 322,
        "codeSnippet": "    320: \n    321:     // IAM Role for Lambda functions with enhanced permissions for RAG\n>>> 322:     const lambdaRole = new iam.Role(this, 'AiPptLambdaRole', {\n    323:       assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n    324:       managedPolicies: ["
      },
      "evidence": [
        "No conditions found in assume role policy"
      ],
      "impact": "Role could be assumed by unintended principals",
      "likelihood": "Medium - Depends on role usage and exposure",
      "remediation": {
        "summary": "Add appropriate conditions to assume role policy",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add conditions to restrict when and how the role can be assumed",
            "codeChanges": "Add conditions like StringEquals, IpAddress, or DateGreaterThan"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Test role assumption with and without conditions"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.524Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "lambda-long-timeout-1756421262525",
      "title": "Lambda Function with Excessive Timeout",
      "description": "Lambda function has a very long timeout that could impact cost and security",
      "severity": "Low",
      "category": "Insecure Configuration",
      "cweId": "CWE-400",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 433,
        "codeSnippet": "    431: \n    432:     // RAG Presentation Resolver Lambda Function\n>>> 433:     const ragPresentationFunction = new lambda.Function(this, 'RagPresentationFunction', {\n    434:       runtime: lambda.Runtime.PYTHON_3_11,\n    435:       handler: 'rag_presentation_resolver.lambda_handler',"
      },
      "evidence": [
        "Long timeout configuration found"
      ],
      "impact": "Could lead to increased costs and potential DoS if function hangs",
      "likelihood": "Low - Depends on function implementation",
      "remediation": {
        "summary": "Review and optimize Lambda timeout settings",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Analyze actual function execution time and set appropriate timeout",
            "codeChanges": "Reduce timeout to minimum required duration"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Monitor function execution times and adjust timeout accordingly"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-timeout-console"
      ],
      "discoveredAt": "2025-08-28T22:47:42.525Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "lambda-long-timeout-1756421262525",
      "title": "Lambda Function with Excessive Timeout",
      "description": "Lambda function has a very long timeout that could impact cost and security",
      "severity": "Low",
      "category": "Insecure Configuration",
      "cweId": "CWE-400",
      "location": {
        "filePath": "../infrastructure/lib/ai-ppt-complete-stack.ts",
        "lineNumber": 515,
        "codeSnippet": "    513: \n    514:     // Document Processor V2 Lambda Function (for S3 events)\n>>> 515:     const documentProcessorV2Function = new lambda.Function(this, 'DocumentProcessorV2Function', {\n    516:       runtime: lambda.Runtime.PYTHON_3_11,\n    517:       handler: 'document_processor.lambda_handler',"
      },
      "evidence": [
        "Long timeout configuration found"
      ],
      "impact": "Could lead to increased costs and potential DoS if function hangs",
      "likelihood": "Low - Depends on function implementation",
      "remediation": {
        "summary": "Review and optimize Lambda timeout settings",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Analyze actual function execution time and set appropriate timeout",
            "codeChanges": "Reduce timeout to minimum required duration"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Monitor function execution times and adjust timeout accordingly"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-timeout-console"
      ],
      "discoveredAt": "2025-08-28T22:47:42.525Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "s3-no-encryption-1756421262543",
      "title": "S3 Bucket Without Encryption",
      "description": "S3 bucket does not have server-side encryption enabled",
      "severity": "High",
      "category": "Cryptographic Failure",
      "cweId": "CWE-311",
      "location": {
        "filePath": "../security-assessment/src/scanners/InfrastructureSecurityScanner.ts",
        "lineNumber": 553,
        "codeSnippet": "    551:       const text = node.getText();\n    552:       \n>>> 553:       if (text.includes('s3.Bucket') || text.includes('Bucket(')) {\n    554:         this.analyzeS3BucketConfiguration(node, filePath, content);\n    555:       }"
      },
      "evidence": [
        "No encryption configuration found"
      ],
      "impact": "Data stored in bucket is not encrypted at rest",
      "likelihood": "Medium - Depends on data sensitivity",
      "remediation": {
        "summary": "Enable server-side encryption for S3 bucket",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add encryption configuration to bucket",
            "codeChanges": "Add encryption: s3.BucketEncryption.S3_MANAGED or KMS_MANAGED"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 1,
        "timeline": "Within 1 week",
        "verification": [
          "Verify encryption is enabled in AWS console"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.543Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "s3-no-encryption-1756421262543",
      "title": "S3 Bucket Without Encryption",
      "description": "S3 bucket does not have server-side encryption enabled",
      "severity": "High",
      "category": "Cryptographic Failure",
      "cweId": "CWE-311",
      "location": {
        "filePath": "../security-assessment/src/scanners/InfrastructureSecurityScanner.ts",
        "lineNumber": 553,
        "codeSnippet": "    551:       const text = node.getText();\n    552:       \n>>> 553:       if (text.includes('s3.Bucket') || text.includes('Bucket(')) {\n    554:         this.analyzeS3BucketConfiguration(node, filePath, content);\n    555:       }"
      },
      "evidence": [
        "No encryption configuration found"
      ],
      "impact": "Data stored in bucket is not encrypted at rest",
      "likelihood": "Medium - Depends on data sensitivity",
      "remediation": {
        "summary": "Enable server-side encryption for S3 bucket",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add encryption configuration to bucket",
            "codeChanges": "Add encryption: s3.BucketEncryption.S3_MANAGED or KMS_MANAGED"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 1,
        "timeline": "Within 1 week",
        "verification": [
          "Verify encryption is enabled in AWS console"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.543Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "api-no-auth-1756421262543",
      "title": "API Gateway Without Authentication",
      "description": "API Gateway does not have authentication configured",
      "severity": "High",
      "category": "Authentication Bypass",
      "cweId": "CWE-306",
      "location": {
        "filePath": "../security-assessment/src/scanners/InfrastructureSecurityScanner.ts",
        "lineNumber": 693,
        "codeSnippet": "    691:       const text = node.getText();\n    692:       \n>>> 693:       if (text.includes('appsync.GraphqlApi') || text.includes('apigateway.RestApi')) {\n    694:         this.analyzeAPIGatewayConfiguration(node, filePath, content);\n    695:       }"
      },
      "evidence": [
        "No authorization configuration found"
      ],
      "impact": "API endpoints are publicly accessible without authentication",
      "likelihood": "High - Unauthenticated APIs are easily exploited",
      "remediation": {
        "summary": "Implement authentication for API Gateway",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add authorization configuration",
            "codeChanges": "Add authorizationConfig with USER_POOL, IAM, or LAMBDA authorization"
          }
        ],
        "estimatedEffort": "2-4 hours",
        "priority": 1,
        "timeline": "Within 1 week",
        "verification": [
          "Test API access requires authentication"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/appsync/latest/devguide/security-authz.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.543Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "api-no-logging-1756421262543",
      "title": "API Gateway Without Logging",
      "description": "API Gateway does not have logging enabled for security monitoring",
      "severity": "Medium",
      "category": "Logging Failure",
      "cweId": "CWE-778",
      "location": {
        "filePath": "../security-assessment/src/scanners/InfrastructureSecurityScanner.ts",
        "lineNumber": 693,
        "codeSnippet": "    691:       const text = node.getText();\n    692:       \n>>> 693:       if (text.includes('appsync.GraphqlApi') || text.includes('apigateway.RestApi')) {\n    694:         this.analyzeAPIGatewayConfiguration(node, filePath, content);\n    695:       }"
      },
      "evidence": [
        "No logging configuration found"
      ],
      "impact": "Security events and API usage cannot be monitored",
      "likelihood": "Medium - Impacts incident response capabilities",
      "remediation": {
        "summary": "Enable logging for API Gateway",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add logging configuration",
            "codeChanges": "Add logConfig with appropriate log level (ERROR or ALL)"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Verify logs are being generated in CloudWatch"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/appsync/latest/devguide/monitoring.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.543Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "api-no-auth-1756421262543",
      "title": "API Gateway Without Authentication",
      "description": "API Gateway does not have authentication configured",
      "severity": "High",
      "category": "Authentication Bypass",
      "cweId": "CWE-306",
      "location": {
        "filePath": "../security-assessment/src/scanners/InfrastructureSecurityScanner.ts",
        "lineNumber": 693,
        "codeSnippet": "    691:       const text = node.getText();\n    692:       \n>>> 693:       if (text.includes('appsync.GraphqlApi') || text.includes('apigateway.RestApi')) {\n    694:         this.analyzeAPIGatewayConfiguration(node, filePath, content);\n    695:       }"
      },
      "evidence": [
        "No authorization configuration found"
      ],
      "impact": "API endpoints are publicly accessible without authentication",
      "likelihood": "High - Unauthenticated APIs are easily exploited",
      "remediation": {
        "summary": "Implement authentication for API Gateway",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add authorization configuration",
            "codeChanges": "Add authorizationConfig with USER_POOL, IAM, or LAMBDA authorization"
          }
        ],
        "estimatedEffort": "2-4 hours",
        "priority": 1,
        "timeline": "Within 1 week",
        "verification": [
          "Test API access requires authentication"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/appsync/latest/devguide/security-authz.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.543Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "api-no-logging-1756421262543",
      "title": "API Gateway Without Logging",
      "description": "API Gateway does not have logging enabled for security monitoring",
      "severity": "Medium",
      "category": "Logging Failure",
      "cweId": "CWE-778",
      "location": {
        "filePath": "../security-assessment/src/scanners/InfrastructureSecurityScanner.ts",
        "lineNumber": 693,
        "codeSnippet": "    691:       const text = node.getText();\n    692:       \n>>> 693:       if (text.includes('appsync.GraphqlApi') || text.includes('apigateway.RestApi')) {\n    694:         this.analyzeAPIGatewayConfiguration(node, filePath, content);\n    695:       }"
      },
      "evidence": [
        "No logging configuration found"
      ],
      "impact": "Security events and API usage cannot be monitored",
      "likelihood": "Medium - Impacts incident response capabilities",
      "remediation": {
        "summary": "Enable logging for API Gateway",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add logging configuration",
            "codeChanges": "Add logConfig with appropriate log level (ERROR or ALL)"
          }
        ],
        "estimatedEffort": "30 minutes",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Verify logs are being generated in CloudWatch"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/appsync/latest/devguide/monitoring.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.543Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "dynamodb-no-encryption-1756421262543",
      "title": "DynamoDB Table Without Customer-Managed Encryption",
      "description": "DynamoDB table uses default encryption instead of customer-managed keys",
      "severity": "Medium",
      "category": "Cryptographic Failure",
      "cweId": "CWE-311",
      "location": {
        "filePath": "../security-assessment/src/scanners/InfrastructureSecurityScanner.ts",
        "lineNumber": 786,
        "codeSnippet": "    784:       const text = node.getText();\n    785:       \n>>> 786:       if (text.includes('dynamodb.Table') || text.includes('Table(')) {\n    787:         this.analyzeDynamoDBConfiguration(node, filePath, content);\n    788:       }"
      },
      "evidence": [
        "No customer-managed encryption configuration found"
      ],
      "impact": "Data is encrypted but with AWS-managed keys, limiting key management control",
      "likelihood": "Low - Default encryption provides basic protection",
      "remediation": {
        "summary": "Consider using customer-managed KMS keys for enhanced security",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Evaluate if customer-managed encryption is required",
            "codeChanges": "Add encryption: dynamodb.TableEncryption.CUSTOMER_MANAGED"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Verify encryption key management meets compliance requirements"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/encryption.tutorial.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.543Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "dynamodb-no-pitr-1756421262543",
      "title": "DynamoDB Table Without Point-in-Time Recovery",
      "description": "DynamoDB table does not have point-in-time recovery enabled",
      "severity": "Low",
      "category": "Insecure Configuration",
      "cweId": "CWE-404",
      "location": {
        "filePath": "../security-assessment/src/scanners/InfrastructureSecurityScanner.ts",
        "lineNumber": 786,
        "codeSnippet": "    784:       const text = node.getText();\n    785:       \n>>> 786:       if (text.includes('dynamodb.Table') || text.includes('Table(')) {\n    787:         this.analyzeDynamoDBConfiguration(node, filePath, content);\n    788:       }"
      },
      "evidence": [
        "No point-in-time recovery configuration found"
      ],
      "impact": "Data loss risk in case of accidental deletion or corruption",
      "likelihood": "Low - Depends on data criticality",
      "remediation": {
        "summary": "Enable point-in-time recovery for critical tables",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add point-in-time recovery configuration",
            "codeChanges": "Add pointInTimeRecovery: true"
          }
        ],
        "estimatedEffort": "15 minutes",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Verify PITR is enabled in AWS console"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.543Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "dynamodb-no-encryption-1756421262543",
      "title": "DynamoDB Table Without Customer-Managed Encryption",
      "description": "DynamoDB table uses default encryption instead of customer-managed keys",
      "severity": "Medium",
      "category": "Cryptographic Failure",
      "cweId": "CWE-311",
      "location": {
        "filePath": "../security-assessment/src/scanners/InfrastructureSecurityScanner.ts",
        "lineNumber": 786,
        "codeSnippet": "    784:       const text = node.getText();\n    785:       \n>>> 786:       if (text.includes('dynamodb.Table') || text.includes('Table(')) {\n    787:         this.analyzeDynamoDBConfiguration(node, filePath, content);\n    788:       }"
      },
      "evidence": [
        "No customer-managed encryption configuration found"
      ],
      "impact": "Data is encrypted but with AWS-managed keys, limiting key management control",
      "likelihood": "Low - Default encryption provides basic protection",
      "remediation": {
        "summary": "Consider using customer-managed KMS keys for enhanced security",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Evaluate if customer-managed encryption is required",
            "codeChanges": "Add encryption: dynamodb.TableEncryption.CUSTOMER_MANAGED"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Verify encryption key management meets compliance requirements"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/encryption.tutorial.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.543Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "dynamodb-no-pitr-1756421262543",
      "title": "DynamoDB Table Without Point-in-Time Recovery",
      "description": "DynamoDB table does not have point-in-time recovery enabled",
      "severity": "Low",
      "category": "Insecure Configuration",
      "cweId": "CWE-404",
      "location": {
        "filePath": "../security-assessment/src/scanners/InfrastructureSecurityScanner.ts",
        "lineNumber": 786,
        "codeSnippet": "    784:       const text = node.getText();\n    785:       \n>>> 786:       if (text.includes('dynamodb.Table') || text.includes('Table(')) {\n    787:         this.analyzeDynamoDBConfiguration(node, filePath, content);\n    788:       }"
      },
      "evidence": [
        "No point-in-time recovery configuration found"
      ],
      "impact": "Data loss risk in case of accidental deletion or corruption",
      "likelihood": "Low - Depends on data criticality",
      "remediation": {
        "summary": "Enable point-in-time recovery for critical tables",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add point-in-time recovery configuration",
            "codeChanges": "Add pointInTimeRecovery: true"
          }
        ],
        "estimatedEffort": "15 minutes",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Verify PITR is enabled in AWS console"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.543Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "dynamodb-no-pitr-1756421262543",
      "title": "DynamoDB Table Without Point-in-Time Recovery",
      "description": "DynamoDB table does not have point-in-time recovery enabled",
      "severity": "Low",
      "category": "Insecure Configuration",
      "cweId": "CWE-404",
      "location": {
        "filePath": "../security-assessment/src/scanners/InfrastructureSecurityScanner.ts",
        "lineNumber": 798,
        "codeSnippet": "    796:     // Check for missing encryption\n    797:     if (!nodeText.includes('encryption') || nodeText.includes('TableEncryption.DEFAULT')) {\n>>> 798:       this.addVulnerability({\n    799:         id: `dynamodb-no-encryption-${Date.now()}`,\n    800:         title: 'DynamoDB Table Without Customer-Managed Encryption',"
      },
      "evidence": [
        "No point-in-time recovery configuration found"
      ],
      "impact": "Data loss risk in case of accidental deletion or corruption",
      "likelihood": "Low - Depends on data criticality",
      "remediation": {
        "summary": "Enable point-in-time recovery for critical tables",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add point-in-time recovery configuration",
            "codeChanges": "Add pointInTimeRecovery: true"
          }
        ],
        "estimatedEffort": "15 minutes",
        "priority": 3,
        "timeline": "Within 1 month",
        "verification": [
          "Verify PITR is enabled in AWS console"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.543Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "cognito-no-mfa-1756421262543",
      "title": "Cognito User Pool Without MFA Configuration",
      "description": "Cognito User Pool does not have multi-factor authentication configured",
      "severity": "Medium",
      "category": "Authentication Bypass",
      "cweId": "CWE-308",
      "location": {
        "filePath": "../security-assessment/src/scanners/InfrastructureSecurityScanner.ts",
        "lineNumber": 879,
        "codeSnippet": "    877:       const text = node.getText();\n    878:       \n>>> 879:       if (text.includes('cognito.UserPool') || text.includes('UserPool(')) {\n    880:         this.analyzeCognitoConfiguration(node, filePath, content);\n    881:       }"
      },
      "evidence": [
        "No MFA configuration found"
      ],
      "impact": "Accounts are vulnerable to credential compromise",
      "likelihood": "Medium - Single-factor authentication is less secure",
      "remediation": {
        "summary": "Configure multi-factor authentication options",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add MFA configuration to user pool",
            "codeChanges": "Add mfa: cognito.Mfa.OPTIONAL or REQUIRED"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Test MFA enrollment and authentication flow"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-mfa.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.543Z",
      "scannerName": "Infrastructure Security Scanner"
    },
    {
      "id": "cognito-no-mfa-1756421262543",
      "title": "Cognito User Pool Without MFA Configuration",
      "description": "Cognito User Pool does not have multi-factor authentication configured",
      "severity": "Medium",
      "category": "Authentication Bypass",
      "cweId": "CWE-308",
      "location": {
        "filePath": "../security-assessment/src/scanners/InfrastructureSecurityScanner.ts",
        "lineNumber": 879,
        "codeSnippet": "    877:       const text = node.getText();\n    878:       \n>>> 879:       if (text.includes('cognito.UserPool') || text.includes('UserPool(')) {\n    880:         this.analyzeCognitoConfiguration(node, filePath, content);\n    881:       }"
      },
      "evidence": [
        "No MFA configuration found"
      ],
      "impact": "Accounts are vulnerable to credential compromise",
      "likelihood": "Medium - Single-factor authentication is less secure",
      "remediation": {
        "summary": "Configure multi-factor authentication options",
        "steps": [
          {
            "stepNumber": 1,
            "description": "Add MFA configuration to user pool",
            "codeChanges": "Add mfa: cognito.Mfa.OPTIONAL or REQUIRED"
          }
        ],
        "estimatedEffort": "1-2 hours",
        "priority": 2,
        "timeline": "Within 2 weeks",
        "verification": [
          "Test MFA enrollment and authentication flow"
        ]
      },
      "references": [
        "https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-mfa.html"
      ],
      "discoveredAt": "2025-08-28T22:47:42.543Z",
      "scannerName": "Infrastructure Security Scanner"
    }
  ],
  "riskAssessments": [
    {
      "vulnerabilityId": "infrastructure-critical-group",
      "riskScore": {
        "likelihood": 5,
        "impact": 5,
        "overallRisk": 25,
        "riskLevel": "Critical",
        "confidenceLevel": 4
      },
      "businessImpact": {
        "impactTypes": [
          "Data Breach",
          "Service Disruption",
          "Compliance Violation"
        ],
        "financialImpact": {
          "estimatedCost": {
            "minimum": 100000,
            "maximum": 1000000,
            "currency": "USD"
          },
          "costFactors": [
            "Incident response",
            "Data breach notification",
            "Regulatory fines"
          ],
          "recoveryTime": "1-4 weeks"
        },
        "operationalImpact": {
          "affectedSystems": [
            "AWS Infrastructure",
            "Application Services"
          ],
          "serviceDowntime": "Potential complete service outage",
          "userImpact": "All users affected",
          "dataIntegrityRisk": true
        },
        "complianceImpact": {
          "affectedRegulations": [
            "GDPR",
            "SOC2",
            "AWS Compliance"
          ],
          "potentialFines": "$10M+ for GDPR violations",
          "auditImplications": [
            "Failed compliance audits",
            "Certification revocation"
          ]
        },
        "reputationalImpact": {
          "publicityRisk": "High - Security breach likely to be public",
          "customerTrustImpact": "Severe loss of customer confidence",
          "brandDamageAssessment": "Long-term brand reputation damage"
        }
      },
      "threatModel": {
        "threatActors": [
          {
            "type": "External Attacker",
            "motivation": "Financial gain, data theft",
            "capabilities": [
              "Advanced persistent threat",
              "Automated scanning"
            ],
            "likelihood": 4
          }
        ],
        "attackVectors": [
          {
            "name": "Privilege Escalation",
            "description": "Exploiting overprivileged IAM roles",
            "complexity": "Low",
            "prerequisites": [
              "Network access",
              "Valid credentials"
            ]
          }
        ],
        "assetValuation": {
          "assetName": "AWS Infrastructure",
          "confidentialityValue": 5,
          "integrityValue": 5,
          "availabilityValue": 5,
          "overallValue": 5
        },
        "threatScenarios": [
          {
            "id": "scenario-1",
            "description": "Attacker exploits public S3 bucket to access sensitive data",
            "threatActor": "External Attacker",
            "attackVector": "Public Resource Access",
            "likelihood": 5,
            "impact": 5,
            "riskScore": {
              "likelihood": 5,
              "impact": 5,
              "overallRisk": 25,
              "riskLevel": "Critical",
              "confidenceLevel": 4
            }
          }
        ]
      },
      "mitigationStrategies": [
        "Implement least privilege access controls",
        "Enable comprehensive logging and monitoring",
        "Regular security configuration reviews"
      ],
      "residualRisk": {
        "likelihood": 2,
        "impact": 3,
        "overallRisk": 6,
        "riskLevel": "Medium",
        "confidenceLevel": 4
      },
      "assessmentDate": "2025-08-28T22:47:42.544Z",
      "assessor": "Infrastructure Security Scanner"
    }
  ],
  "complianceMappings": [
    {
      "vulnerabilityId": "s3-public-access-1756421262517",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Public access configuration found in S3 bucket"
          ],
          "gaps": [
            "Vulnerability found: S3 Bucket with Public Access"
          ],
          "remediation": [
            "Remove public access settings",
            "Implement bucket policies with specific principals"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "S3 bucket is configured to allow public access, potentially exposing sensitive data",
          "severity": "Critical",
          "remediation": "Remove public access and implement proper access controls",
          "timeline": "Immediate",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Remove public access settings",
        "Implement bucket policies with specific principals"
      ]
    },
    {
      "vulnerabilityId": "s3-no-encryption-1756421262517",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A02-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A02",
            "title": "Cryptographic Failures",
            "description": "Protect data in transit and at rest with strong cryptography",
            "category": "Cryptography",
            "requirements": [
              "Encrypt sensitive data at rest",
              "Encrypt data in transit",
              "Use strong cryptographic algorithms"
            ],
            "testProcedures": [
              "Verify encryption implementation",
              "Test key management practices",
              "Review cryptographic standards"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No encryption configuration found"
          ],
          "gaps": [
            "Vulnerability found: S3 Bucket Without Encryption"
          ],
          "remediation": [
            "Add encryption configuration to bucket"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A02-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "S3 bucket does not have server-side encryption enabled",
          "severity": "High",
          "remediation": "Enable server-side encryption for S3 bucket",
          "timeline": "Within 1 week",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add encryption configuration to bucket"
      ]
    },
    {
      "vulnerabilityId": "s3-permissive-cors-1756421262517",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Wildcard (*) found in CORS allowedOrigins"
          ],
          "gaps": [
            "Vulnerability found: S3 Bucket with Permissive CORS Policy"
          ],
          "remediation": [
            "Replace wildcard with specific domain names"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "S3 bucket CORS policy allows requests from any origin (*)",
          "severity": "Medium",
          "remediation": "Restrict CORS policy to specific trusted origins",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Replace wildcard with specific domain names"
      ]
    },
    {
      "vulnerabilityId": "s3-public-access-1756421262517",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Public access configuration found in S3 bucket"
          ],
          "gaps": [
            "Vulnerability found: S3 Bucket with Public Access"
          ],
          "remediation": [
            "Remove public access settings",
            "Implement bucket policies with specific principals"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "S3 bucket is configured to allow public access, potentially exposing sensitive data",
          "severity": "Critical",
          "remediation": "Remove public access and implement proper access controls",
          "timeline": "Immediate",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Remove public access settings",
        "Implement bucket policies with specific principals"
      ]
    },
    {
      "vulnerabilityId": "s3-no-encryption-1756421262517",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A02-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A02",
            "title": "Cryptographic Failures",
            "description": "Protect data in transit and at rest with strong cryptography",
            "category": "Cryptography",
            "requirements": [
              "Encrypt sensitive data at rest",
              "Encrypt data in transit",
              "Use strong cryptographic algorithms"
            ],
            "testProcedures": [
              "Verify encryption implementation",
              "Test key management practices",
              "Review cryptographic standards"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No encryption configuration found"
          ],
          "gaps": [
            "Vulnerability found: S3 Bucket Without Encryption"
          ],
          "remediation": [
            "Add encryption configuration to bucket"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A02-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "S3 bucket does not have server-side encryption enabled",
          "severity": "High",
          "remediation": "Enable server-side encryption for S3 bucket",
          "timeline": "Within 1 week",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add encryption configuration to bucket"
      ]
    },
    {
      "vulnerabilityId": "s3-permissive-cors-1756421262517",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Wildcard (*) found in CORS allowedOrigins"
          ],
          "gaps": [
            "Vulnerability found: S3 Bucket with Permissive CORS Policy"
          ],
          "remediation": [
            "Replace wildcard with specific domain names"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "S3 bucket CORS policy allows requests from any origin (*)",
          "severity": "Medium",
          "remediation": "Restrict CORS policy to specific trusted origins",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Replace wildcard with specific domain names"
      ]
    },
    {
      "vulnerabilityId": "dynamodb-no-encryption-1756421262518",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A02-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A02",
            "title": "Cryptographic Failures",
            "description": "Protect data in transit and at rest with strong cryptography",
            "category": "Cryptography",
            "requirements": [
              "Encrypt sensitive data at rest",
              "Encrypt data in transit",
              "Use strong cryptographic algorithms"
            ],
            "testProcedures": [
              "Verify encryption implementation",
              "Test key management practices",
              "Review cryptographic standards"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No customer-managed encryption configuration found"
          ],
          "gaps": [
            "Vulnerability found: DynamoDB Table Without Customer-Managed Encryption"
          ],
          "remediation": [
            "Evaluate if customer-managed encryption is required"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A02-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "DynamoDB table uses default encryption instead of customer-managed keys",
          "severity": "Medium",
          "remediation": "Consider using customer-managed KMS keys for enhanced security",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Evaluate if customer-managed encryption is required"
      ]
    },
    {
      "vulnerabilityId": "dynamodb-no-pitr-1756421262518",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No point-in-time recovery configuration found"
          ],
          "gaps": [
            "Vulnerability found: DynamoDB Table Without Point-in-Time Recovery"
          ],
          "remediation": [
            "Add point-in-time recovery configuration"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "DynamoDB table does not have point-in-time recovery enabled",
          "severity": "Low",
          "remediation": "Enable point-in-time recovery for critical tables",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add point-in-time recovery configuration"
      ]
    },
    {
      "vulnerabilityId": "dynamodb-no-encryption-1756421262518",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A02-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A02",
            "title": "Cryptographic Failures",
            "description": "Protect data in transit and at rest with strong cryptography",
            "category": "Cryptography",
            "requirements": [
              "Encrypt sensitive data at rest",
              "Encrypt data in transit",
              "Use strong cryptographic algorithms"
            ],
            "testProcedures": [
              "Verify encryption implementation",
              "Test key management practices",
              "Review cryptographic standards"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No customer-managed encryption configuration found"
          ],
          "gaps": [
            "Vulnerability found: DynamoDB Table Without Customer-Managed Encryption"
          ],
          "remediation": [
            "Evaluate if customer-managed encryption is required"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A02-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "DynamoDB table uses default encryption instead of customer-managed keys",
          "severity": "Medium",
          "remediation": "Consider using customer-managed KMS keys for enhanced security",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Evaluate if customer-managed encryption is required"
      ]
    },
    {
      "vulnerabilityId": "dynamodb-no-pitr-1756421262518",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No point-in-time recovery configuration found"
          ],
          "gaps": [
            "Vulnerability found: DynamoDB Table Without Point-in-Time Recovery"
          ],
          "remediation": [
            "Add point-in-time recovery configuration"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "DynamoDB table does not have point-in-time recovery enabled",
          "severity": "Low",
          "remediation": "Enable point-in-time recovery for critical tables",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add point-in-time recovery configuration"
      ]
    },
    {
      "vulnerabilityId": "cognito-weak-password-1756421262518",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A07-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A07",
            "title": "Identification and Authentication Failures",
            "description": "Proper authentication and session management",
            "category": "Authentication",
            "requirements": [
              "Implement strong authentication",
              "Use multi-factor authentication",
              "Proper session management"
            ],
            "testProcedures": [
              "Test authentication mechanisms",
              "Verify MFA implementation",
              "Review session handling"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Weak password policy configuration found"
          ],
          "gaps": [
            "Vulnerability found: Cognito User Pool with Weak Password Policy"
          ],
          "remediation": [
            "Increase minimum password length and complexity"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A07-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "Cognito User Pool has a weak password policy that may allow easily guessable passwords",
          "severity": "Medium",
          "remediation": "Strengthen password policy requirements",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Increase minimum password length and complexity"
      ]
    },
    {
      "vulnerabilityId": "cognito-no-mfa-1756421262518",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A07-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A07",
            "title": "Identification and Authentication Failures",
            "description": "Proper authentication and session management",
            "category": "Authentication",
            "requirements": [
              "Implement strong authentication",
              "Use multi-factor authentication",
              "Proper session management"
            ],
            "testProcedures": [
              "Test authentication mechanisms",
              "Verify MFA implementation",
              "Review session handling"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No MFA configuration found"
          ],
          "gaps": [
            "Vulnerability found: Cognito User Pool Without MFA Configuration"
          ],
          "remediation": [
            "Add MFA configuration to user pool"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A07-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "Cognito User Pool does not have multi-factor authentication configured",
          "severity": "Medium",
          "remediation": "Configure multi-factor authentication options",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add MFA configuration to user pool"
      ]
    },
    {
      "vulnerabilityId": "cognito-no-mfa-1756421262518",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A07-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A07",
            "title": "Identification and Authentication Failures",
            "description": "Proper authentication and session management",
            "category": "Authentication",
            "requirements": [
              "Implement strong authentication",
              "Use multi-factor authentication",
              "Proper session management"
            ],
            "testProcedures": [
              "Test authentication mechanisms",
              "Verify MFA implementation",
              "Review session handling"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No MFA configuration found"
          ],
          "gaps": [
            "Vulnerability found: Cognito User Pool Without MFA Configuration"
          ],
          "remediation": [
            "Add MFA configuration to user pool"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A07-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "Cognito User Pool does not have multi-factor authentication configured",
          "severity": "Medium",
          "remediation": "Configure multi-factor authentication options",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add MFA configuration to user pool"
      ]
    },
    {
      "vulnerabilityId": "iam-overprivileged-1756421262518",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A01-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A01",
            "title": "Broken Access Control",
            "description": "Access control enforces policy such that users cannot act outside of their intended permissions",
            "category": "Access Control",
            "requirements": [
              "Implement principle of least privilege",
              "Deny by default access controls",
              "Log access control failures"
            ],
            "testProcedures": [
              "Review IAM policies for overprivileged access",
              "Test unauthorized access attempts",
              "Verify access control logging"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Wildcard (*) found in IAM policy actions or resources"
          ],
          "gaps": [
            "Vulnerability found: Overprivileged IAM Role"
          ],
          "remediation": [
            "Review the specific permissions required for this role",
            "Use AWS IAM Access Analyzer to identify unused permissions"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A01-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "IAM role contains wildcard permissions that grant excessive access",
          "severity": "High",
          "remediation": "Apply principle of least privilege to IAM roles",
          "timeline": "Within 1 week",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Review the specific permissions required for this role",
        "Use AWS IAM Access Analyzer to identify unused permissions"
      ]
    },
    {
      "vulnerabilityId": "iam-missing-conditions-1756421262518",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A01-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A01",
            "title": "Broken Access Control",
            "description": "Access control enforces policy such that users cannot act outside of their intended permissions",
            "category": "Access Control",
            "requirements": [
              "Implement principle of least privilege",
              "Deny by default access controls",
              "Log access control failures"
            ],
            "testProcedures": [
              "Review IAM policies for overprivileged access",
              "Test unauthorized access attempts",
              "Verify access control logging"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No conditions found in assume role policy"
          ],
          "gaps": [
            "Vulnerability found: IAM Role Missing Assume Role Conditions"
          ],
          "remediation": [
            "Add conditions to restrict when and how the role can be assumed"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A01-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "IAM role lacks conditions in assume role policy, potentially allowing unauthorized access",
          "severity": "Medium",
          "remediation": "Add appropriate conditions to assume role policy",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add conditions to restrict when and how the role can be assumed"
      ]
    },
    {
      "vulnerabilityId": "lambda-long-timeout-1756421262519",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Long timeout configuration found"
          ],
          "gaps": [
            "Vulnerability found: Lambda Function with Excessive Timeout"
          ],
          "remediation": [
            "Analyze actual function execution time and set appropriate timeout"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "Lambda function has a very long timeout that could impact cost and security",
          "severity": "Low",
          "remediation": "Review and optimize Lambda timeout settings",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Analyze actual function execution time and set appropriate timeout"
      ]
    },
    {
      "vulnerabilityId": "lambda-long-timeout-1756421262519",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Long timeout configuration found"
          ],
          "gaps": [
            "Vulnerability found: Lambda Function with Excessive Timeout"
          ],
          "remediation": [
            "Analyze actual function execution time and set appropriate timeout"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "Lambda function has a very long timeout that could impact cost and security",
          "severity": "Low",
          "remediation": "Review and optimize Lambda timeout settings",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Analyze actual function execution time and set appropriate timeout"
      ]
    },
    {
      "vulnerabilityId": "iam-overprivileged-1756421262519",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A01-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A01",
            "title": "Broken Access Control",
            "description": "Access control enforces policy such that users cannot act outside of their intended permissions",
            "category": "Access Control",
            "requirements": [
              "Implement principle of least privilege",
              "Deny by default access controls",
              "Log access control failures"
            ],
            "testProcedures": [
              "Review IAM policies for overprivileged access",
              "Test unauthorized access attempts",
              "Verify access control logging"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Wildcard (*) found in IAM policy actions or resources"
          ],
          "gaps": [
            "Vulnerability found: Overprivileged IAM Role"
          ],
          "remediation": [
            "Review the specific permissions required for this role",
            "Use AWS IAM Access Analyzer to identify unused permissions"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A01-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "IAM role contains wildcard permissions that grant excessive access",
          "severity": "High",
          "remediation": "Apply principle of least privilege to IAM roles",
          "timeline": "Within 1 week",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Review the specific permissions required for this role",
        "Use AWS IAM Access Analyzer to identify unused permissions"
      ]
    },
    {
      "vulnerabilityId": "iam-missing-conditions-1756421262519",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A01-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A01",
            "title": "Broken Access Control",
            "description": "Access control enforces policy such that users cannot act outside of their intended permissions",
            "category": "Access Control",
            "requirements": [
              "Implement principle of least privilege",
              "Deny by default access controls",
              "Log access control failures"
            ],
            "testProcedures": [
              "Review IAM policies for overprivileged access",
              "Test unauthorized access attempts",
              "Verify access control logging"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No conditions found in assume role policy"
          ],
          "gaps": [
            "Vulnerability found: IAM Role Missing Assume Role Conditions"
          ],
          "remediation": [
            "Add conditions to restrict when and how the role can be assumed"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A01-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "IAM role lacks conditions in assume role policy, potentially allowing unauthorized access",
          "severity": "Medium",
          "remediation": "Add appropriate conditions to assume role policy",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add conditions to restrict when and how the role can be assumed"
      ]
    },
    {
      "vulnerabilityId": "lambda-long-timeout-1756421262519",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Long timeout configuration found"
          ],
          "gaps": [
            "Vulnerability found: Lambda Function with Excessive Timeout"
          ],
          "remediation": [
            "Analyze actual function execution time and set appropriate timeout"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "Lambda function has a very long timeout that could impact cost and security",
          "severity": "Low",
          "remediation": "Review and optimize Lambda timeout settings",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Analyze actual function execution time and set appropriate timeout"
      ]
    },
    {
      "vulnerabilityId": "lambda-long-timeout-1756421262520",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Long timeout configuration found"
          ],
          "gaps": [
            "Vulnerability found: Lambda Function with Excessive Timeout"
          ],
          "remediation": [
            "Analyze actual function execution time and set appropriate timeout"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "Lambda function has a very long timeout that could impact cost and security",
          "severity": "Low",
          "remediation": "Review and optimize Lambda timeout settings",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Analyze actual function execution time and set appropriate timeout"
      ]
    },
    {
      "vulnerabilityId": "s3-public-access-1756421262523",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Public access configuration found in S3 bucket"
          ],
          "gaps": [
            "Vulnerability found: S3 Bucket with Public Access"
          ],
          "remediation": [
            "Remove public access settings",
            "Implement bucket policies with specific principals"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "S3 bucket is configured to allow public access, potentially exposing sensitive data",
          "severity": "Critical",
          "remediation": "Remove public access and implement proper access controls",
          "timeline": "Immediate",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Remove public access settings",
        "Implement bucket policies with specific principals"
      ]
    },
    {
      "vulnerabilityId": "s3-no-encryption-1756421262523",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A02-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A02",
            "title": "Cryptographic Failures",
            "description": "Protect data in transit and at rest with strong cryptography",
            "category": "Cryptography",
            "requirements": [
              "Encrypt sensitive data at rest",
              "Encrypt data in transit",
              "Use strong cryptographic algorithms"
            ],
            "testProcedures": [
              "Verify encryption implementation",
              "Test key management practices",
              "Review cryptographic standards"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No encryption configuration found"
          ],
          "gaps": [
            "Vulnerability found: S3 Bucket Without Encryption"
          ],
          "remediation": [
            "Add encryption configuration to bucket"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A02-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "S3 bucket does not have server-side encryption enabled",
          "severity": "High",
          "remediation": "Enable server-side encryption for S3 bucket",
          "timeline": "Within 1 week",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add encryption configuration to bucket"
      ]
    },
    {
      "vulnerabilityId": "s3-permissive-cors-1756421262524",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Wildcard (*) found in CORS allowedOrigins"
          ],
          "gaps": [
            "Vulnerability found: S3 Bucket with Permissive CORS Policy"
          ],
          "remediation": [
            "Replace wildcard with specific domain names"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "S3 bucket CORS policy allows requests from any origin (*)",
          "severity": "Medium",
          "remediation": "Restrict CORS policy to specific trusted origins",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Replace wildcard with specific domain names"
      ]
    },
    {
      "vulnerabilityId": "s3-public-access-1756421262524",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Public access configuration found in S3 bucket"
          ],
          "gaps": [
            "Vulnerability found: S3 Bucket with Public Access"
          ],
          "remediation": [
            "Remove public access settings",
            "Implement bucket policies with specific principals"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "S3 bucket is configured to allow public access, potentially exposing sensitive data",
          "severity": "Critical",
          "remediation": "Remove public access and implement proper access controls",
          "timeline": "Immediate",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Remove public access settings",
        "Implement bucket policies with specific principals"
      ]
    },
    {
      "vulnerabilityId": "s3-no-encryption-1756421262524",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A02-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A02",
            "title": "Cryptographic Failures",
            "description": "Protect data in transit and at rest with strong cryptography",
            "category": "Cryptography",
            "requirements": [
              "Encrypt sensitive data at rest",
              "Encrypt data in transit",
              "Use strong cryptographic algorithms"
            ],
            "testProcedures": [
              "Verify encryption implementation",
              "Test key management practices",
              "Review cryptographic standards"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No encryption configuration found"
          ],
          "gaps": [
            "Vulnerability found: S3 Bucket Without Encryption"
          ],
          "remediation": [
            "Add encryption configuration to bucket"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A02-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "S3 bucket does not have server-side encryption enabled",
          "severity": "High",
          "remediation": "Enable server-side encryption for S3 bucket",
          "timeline": "Within 1 week",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add encryption configuration to bucket"
      ]
    },
    {
      "vulnerabilityId": "s3-permissive-cors-1756421262524",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Wildcard (*) found in CORS allowedOrigins"
          ],
          "gaps": [
            "Vulnerability found: S3 Bucket with Permissive CORS Policy"
          ],
          "remediation": [
            "Replace wildcard with specific domain names"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "S3 bucket CORS policy allows requests from any origin (*)",
          "severity": "Medium",
          "remediation": "Restrict CORS policy to specific trusted origins",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Replace wildcard with specific domain names"
      ]
    },
    {
      "vulnerabilityId": "dynamodb-no-encryption-1756421262524",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A02-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A02",
            "title": "Cryptographic Failures",
            "description": "Protect data in transit and at rest with strong cryptography",
            "category": "Cryptography",
            "requirements": [
              "Encrypt sensitive data at rest",
              "Encrypt data in transit",
              "Use strong cryptographic algorithms"
            ],
            "testProcedures": [
              "Verify encryption implementation",
              "Test key management practices",
              "Review cryptographic standards"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No customer-managed encryption configuration found"
          ],
          "gaps": [
            "Vulnerability found: DynamoDB Table Without Customer-Managed Encryption"
          ],
          "remediation": [
            "Evaluate if customer-managed encryption is required"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A02-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "DynamoDB table uses default encryption instead of customer-managed keys",
          "severity": "Medium",
          "remediation": "Consider using customer-managed KMS keys for enhanced security",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Evaluate if customer-managed encryption is required"
      ]
    },
    {
      "vulnerabilityId": "dynamodb-no-pitr-1756421262524",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No point-in-time recovery configuration found"
          ],
          "gaps": [
            "Vulnerability found: DynamoDB Table Without Point-in-Time Recovery"
          ],
          "remediation": [
            "Add point-in-time recovery configuration"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "DynamoDB table does not have point-in-time recovery enabled",
          "severity": "Low",
          "remediation": "Enable point-in-time recovery for critical tables",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add point-in-time recovery configuration"
      ]
    },
    {
      "vulnerabilityId": "dynamodb-no-encryption-1756421262524",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A02-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A02",
            "title": "Cryptographic Failures",
            "description": "Protect data in transit and at rest with strong cryptography",
            "category": "Cryptography",
            "requirements": [
              "Encrypt sensitive data at rest",
              "Encrypt data in transit",
              "Use strong cryptographic algorithms"
            ],
            "testProcedures": [
              "Verify encryption implementation",
              "Test key management practices",
              "Review cryptographic standards"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No customer-managed encryption configuration found"
          ],
          "gaps": [
            "Vulnerability found: DynamoDB Table Without Customer-Managed Encryption"
          ],
          "remediation": [
            "Evaluate if customer-managed encryption is required"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A02-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "DynamoDB table uses default encryption instead of customer-managed keys",
          "severity": "Medium",
          "remediation": "Consider using customer-managed KMS keys for enhanced security",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Evaluate if customer-managed encryption is required"
      ]
    },
    {
      "vulnerabilityId": "dynamodb-no-pitr-1756421262524",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No point-in-time recovery configuration found"
          ],
          "gaps": [
            "Vulnerability found: DynamoDB Table Without Point-in-Time Recovery"
          ],
          "remediation": [
            "Add point-in-time recovery configuration"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "DynamoDB table does not have point-in-time recovery enabled",
          "severity": "Low",
          "remediation": "Enable point-in-time recovery for critical tables",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add point-in-time recovery configuration"
      ]
    },
    {
      "vulnerabilityId": "cognito-weak-password-1756421262524",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A07-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A07",
            "title": "Identification and Authentication Failures",
            "description": "Proper authentication and session management",
            "category": "Authentication",
            "requirements": [
              "Implement strong authentication",
              "Use multi-factor authentication",
              "Proper session management"
            ],
            "testProcedures": [
              "Test authentication mechanisms",
              "Verify MFA implementation",
              "Review session handling"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Weak password policy configuration found"
          ],
          "gaps": [
            "Vulnerability found: Cognito User Pool with Weak Password Policy"
          ],
          "remediation": [
            "Increase minimum password length and complexity"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A07-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "Cognito User Pool has a weak password policy that may allow easily guessable passwords",
          "severity": "Medium",
          "remediation": "Strengthen password policy requirements",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Increase minimum password length and complexity"
      ]
    },
    {
      "vulnerabilityId": "cognito-no-mfa-1756421262524",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A07-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A07",
            "title": "Identification and Authentication Failures",
            "description": "Proper authentication and session management",
            "category": "Authentication",
            "requirements": [
              "Implement strong authentication",
              "Use multi-factor authentication",
              "Proper session management"
            ],
            "testProcedures": [
              "Test authentication mechanisms",
              "Verify MFA implementation",
              "Review session handling"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No MFA configuration found"
          ],
          "gaps": [
            "Vulnerability found: Cognito User Pool Without MFA Configuration"
          ],
          "remediation": [
            "Add MFA configuration to user pool"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A07-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "Cognito User Pool does not have multi-factor authentication configured",
          "severity": "Medium",
          "remediation": "Configure multi-factor authentication options",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add MFA configuration to user pool"
      ]
    },
    {
      "vulnerabilityId": "cognito-no-mfa-1756421262524",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A07-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A07",
            "title": "Identification and Authentication Failures",
            "description": "Proper authentication and session management",
            "category": "Authentication",
            "requirements": [
              "Implement strong authentication",
              "Use multi-factor authentication",
              "Proper session management"
            ],
            "testProcedures": [
              "Test authentication mechanisms",
              "Verify MFA implementation",
              "Review session handling"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No MFA configuration found"
          ],
          "gaps": [
            "Vulnerability found: Cognito User Pool Without MFA Configuration"
          ],
          "remediation": [
            "Add MFA configuration to user pool"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A07-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "Cognito User Pool does not have multi-factor authentication configured",
          "severity": "Medium",
          "remediation": "Configure multi-factor authentication options",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add MFA configuration to user pool"
      ]
    },
    {
      "vulnerabilityId": "iam-overprivileged-1756421262524",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A01-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A01",
            "title": "Broken Access Control",
            "description": "Access control enforces policy such that users cannot act outside of their intended permissions",
            "category": "Access Control",
            "requirements": [
              "Implement principle of least privilege",
              "Deny by default access controls",
              "Log access control failures"
            ],
            "testProcedures": [
              "Review IAM policies for overprivileged access",
              "Test unauthorized access attempts",
              "Verify access control logging"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Wildcard (*) found in IAM policy actions or resources"
          ],
          "gaps": [
            "Vulnerability found: Overprivileged IAM Role"
          ],
          "remediation": [
            "Review the specific permissions required for this role",
            "Use AWS IAM Access Analyzer to identify unused permissions"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A01-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "IAM role contains wildcard permissions that grant excessive access",
          "severity": "High",
          "remediation": "Apply principle of least privilege to IAM roles",
          "timeline": "Within 1 week",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Review the specific permissions required for this role",
        "Use AWS IAM Access Analyzer to identify unused permissions"
      ]
    },
    {
      "vulnerabilityId": "iam-missing-conditions-1756421262524",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A01-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A01",
            "title": "Broken Access Control",
            "description": "Access control enforces policy such that users cannot act outside of their intended permissions",
            "category": "Access Control",
            "requirements": [
              "Implement principle of least privilege",
              "Deny by default access controls",
              "Log access control failures"
            ],
            "testProcedures": [
              "Review IAM policies for overprivileged access",
              "Test unauthorized access attempts",
              "Verify access control logging"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No conditions found in assume role policy"
          ],
          "gaps": [
            "Vulnerability found: IAM Role Missing Assume Role Conditions"
          ],
          "remediation": [
            "Add conditions to restrict when and how the role can be assumed"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A01-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "IAM role lacks conditions in assume role policy, potentially allowing unauthorized access",
          "severity": "Medium",
          "remediation": "Add appropriate conditions to assume role policy",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add conditions to restrict when and how the role can be assumed"
      ]
    },
    {
      "vulnerabilityId": "lambda-long-timeout-1756421262524",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Long timeout configuration found"
          ],
          "gaps": [
            "Vulnerability found: Lambda Function with Excessive Timeout"
          ],
          "remediation": [
            "Analyze actual function execution time and set appropriate timeout"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "Lambda function has a very long timeout that could impact cost and security",
          "severity": "Low",
          "remediation": "Review and optimize Lambda timeout settings",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Analyze actual function execution time and set appropriate timeout"
      ]
    },
    {
      "vulnerabilityId": "iam-overprivileged-1756421262524",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A01-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A01",
            "title": "Broken Access Control",
            "description": "Access control enforces policy such that users cannot act outside of their intended permissions",
            "category": "Access Control",
            "requirements": [
              "Implement principle of least privilege",
              "Deny by default access controls",
              "Log access control failures"
            ],
            "testProcedures": [
              "Review IAM policies for overprivileged access",
              "Test unauthorized access attempts",
              "Verify access control logging"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Wildcard (*) found in IAM policy actions or resources"
          ],
          "gaps": [
            "Vulnerability found: Overprivileged IAM Role"
          ],
          "remediation": [
            "Review the specific permissions required for this role",
            "Use AWS IAM Access Analyzer to identify unused permissions"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A01-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "IAM role contains wildcard permissions that grant excessive access",
          "severity": "High",
          "remediation": "Apply principle of least privilege to IAM roles",
          "timeline": "Within 1 week",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Review the specific permissions required for this role",
        "Use AWS IAM Access Analyzer to identify unused permissions"
      ]
    },
    {
      "vulnerabilityId": "iam-missing-conditions-1756421262524",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A01-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A01",
            "title": "Broken Access Control",
            "description": "Access control enforces policy such that users cannot act outside of their intended permissions",
            "category": "Access Control",
            "requirements": [
              "Implement principle of least privilege",
              "Deny by default access controls",
              "Log access control failures"
            ],
            "testProcedures": [
              "Review IAM policies for overprivileged access",
              "Test unauthorized access attempts",
              "Verify access control logging"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No conditions found in assume role policy"
          ],
          "gaps": [
            "Vulnerability found: IAM Role Missing Assume Role Conditions"
          ],
          "remediation": [
            "Add conditions to restrict when and how the role can be assumed"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A01-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "IAM role lacks conditions in assume role policy, potentially allowing unauthorized access",
          "severity": "Medium",
          "remediation": "Add appropriate conditions to assume role policy",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add conditions to restrict when and how the role can be assumed"
      ]
    },
    {
      "vulnerabilityId": "lambda-long-timeout-1756421262525",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Long timeout configuration found"
          ],
          "gaps": [
            "Vulnerability found: Lambda Function with Excessive Timeout"
          ],
          "remediation": [
            "Analyze actual function execution time and set appropriate timeout"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "Lambda function has a very long timeout that could impact cost and security",
          "severity": "Low",
          "remediation": "Review and optimize Lambda timeout settings",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Analyze actual function execution time and set appropriate timeout"
      ]
    },
    {
      "vulnerabilityId": "lambda-long-timeout-1756421262525",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "Long timeout configuration found"
          ],
          "gaps": [
            "Vulnerability found: Lambda Function with Excessive Timeout"
          ],
          "remediation": [
            "Analyze actual function execution time and set appropriate timeout"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "Lambda function has a very long timeout that could impact cost and security",
          "severity": "Low",
          "remediation": "Review and optimize Lambda timeout settings",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Analyze actual function execution time and set appropriate timeout"
      ]
    },
    {
      "vulnerabilityId": "s3-no-encryption-1756421262543",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A02-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A02",
            "title": "Cryptographic Failures",
            "description": "Protect data in transit and at rest with strong cryptography",
            "category": "Cryptography",
            "requirements": [
              "Encrypt sensitive data at rest",
              "Encrypt data in transit",
              "Use strong cryptographic algorithms"
            ],
            "testProcedures": [
              "Verify encryption implementation",
              "Test key management practices",
              "Review cryptographic standards"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No encryption configuration found"
          ],
          "gaps": [
            "Vulnerability found: S3 Bucket Without Encryption"
          ],
          "remediation": [
            "Add encryption configuration to bucket"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A02-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "S3 bucket does not have server-side encryption enabled",
          "severity": "High",
          "remediation": "Enable server-side encryption for S3 bucket",
          "timeline": "Within 1 week",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add encryption configuration to bucket"
      ]
    },
    {
      "vulnerabilityId": "s3-no-encryption-1756421262543",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A02-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A02",
            "title": "Cryptographic Failures",
            "description": "Protect data in transit and at rest with strong cryptography",
            "category": "Cryptography",
            "requirements": [
              "Encrypt sensitive data at rest",
              "Encrypt data in transit",
              "Use strong cryptographic algorithms"
            ],
            "testProcedures": [
              "Verify encryption implementation",
              "Test key management practices",
              "Review cryptographic standards"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No encryption configuration found"
          ],
          "gaps": [
            "Vulnerability found: S3 Bucket Without Encryption"
          ],
          "remediation": [
            "Add encryption configuration to bucket"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A02-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "S3 bucket does not have server-side encryption enabled",
          "severity": "High",
          "remediation": "Enable server-side encryption for S3 bucket",
          "timeline": "Within 1 week",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add encryption configuration to bucket"
      ]
    },
    {
      "vulnerabilityId": "api-no-auth-1756421262543",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A07-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A07",
            "title": "Identification and Authentication Failures",
            "description": "Proper authentication and session management",
            "category": "Authentication",
            "requirements": [
              "Implement strong authentication",
              "Use multi-factor authentication",
              "Proper session management"
            ],
            "testProcedures": [
              "Test authentication mechanisms",
              "Verify MFA implementation",
              "Review session handling"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No authorization configuration found"
          ],
          "gaps": [
            "Vulnerability found: API Gateway Without Authentication"
          ],
          "remediation": [
            "Add authorization configuration"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A07-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "API Gateway does not have authentication configured",
          "severity": "High",
          "remediation": "Implement authentication for API Gateway",
          "timeline": "Within 1 week",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add authorization configuration"
      ]
    },
    {
      "vulnerabilityId": "api-no-logging-1756421262543",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A09-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A09",
            "title": "Security Logging and Monitoring Failures",
            "description": "Comprehensive security logging and monitoring",
            "category": "Logging",
            "requirements": [
              "Log security events",
              "Monitor for suspicious activity",
              "Implement alerting mechanisms"
            ],
            "testProcedures": [
              "Review logging configuration",
              "Test monitoring systems",
              "Verify alert mechanisms"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No logging configuration found"
          ],
          "gaps": [
            "Vulnerability found: API Gateway Without Logging"
          ],
          "remediation": [
            "Add logging configuration"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A09-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "API Gateway does not have logging enabled for security monitoring",
          "severity": "Medium",
          "remediation": "Enable logging for API Gateway",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add logging configuration"
      ]
    },
    {
      "vulnerabilityId": "api-no-auth-1756421262543",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A07-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A07",
            "title": "Identification and Authentication Failures",
            "description": "Proper authentication and session management",
            "category": "Authentication",
            "requirements": [
              "Implement strong authentication",
              "Use multi-factor authentication",
              "Proper session management"
            ],
            "testProcedures": [
              "Test authentication mechanisms",
              "Verify MFA implementation",
              "Review session handling"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No authorization configuration found"
          ],
          "gaps": [
            "Vulnerability found: API Gateway Without Authentication"
          ],
          "remediation": [
            "Add authorization configuration"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A07-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "API Gateway does not have authentication configured",
          "severity": "High",
          "remediation": "Implement authentication for API Gateway",
          "timeline": "Within 1 week",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add authorization configuration"
      ]
    },
    {
      "vulnerabilityId": "api-no-logging-1756421262543",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A09-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A09",
            "title": "Security Logging and Monitoring Failures",
            "description": "Comprehensive security logging and monitoring",
            "category": "Logging",
            "requirements": [
              "Log security events",
              "Monitor for suspicious activity",
              "Implement alerting mechanisms"
            ],
            "testProcedures": [
              "Review logging configuration",
              "Test monitoring systems",
              "Verify alert mechanisms"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No logging configuration found"
          ],
          "gaps": [
            "Vulnerability found: API Gateway Without Logging"
          ],
          "remediation": [
            "Add logging configuration"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A09-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "API Gateway does not have logging enabled for security monitoring",
          "severity": "Medium",
          "remediation": "Enable logging for API Gateway",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add logging configuration"
      ]
    },
    {
      "vulnerabilityId": "dynamodb-no-encryption-1756421262543",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A02-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A02",
            "title": "Cryptographic Failures",
            "description": "Protect data in transit and at rest with strong cryptography",
            "category": "Cryptography",
            "requirements": [
              "Encrypt sensitive data at rest",
              "Encrypt data in transit",
              "Use strong cryptographic algorithms"
            ],
            "testProcedures": [
              "Verify encryption implementation",
              "Test key management practices",
              "Review cryptographic standards"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No customer-managed encryption configuration found"
          ],
          "gaps": [
            "Vulnerability found: DynamoDB Table Without Customer-Managed Encryption"
          ],
          "remediation": [
            "Evaluate if customer-managed encryption is required"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A02-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "DynamoDB table uses default encryption instead of customer-managed keys",
          "severity": "Medium",
          "remediation": "Consider using customer-managed KMS keys for enhanced security",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Evaluate if customer-managed encryption is required"
      ]
    },
    {
      "vulnerabilityId": "dynamodb-no-pitr-1756421262543",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No point-in-time recovery configuration found"
          ],
          "gaps": [
            "Vulnerability found: DynamoDB Table Without Point-in-Time Recovery"
          ],
          "remediation": [
            "Add point-in-time recovery configuration"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "DynamoDB table does not have point-in-time recovery enabled",
          "severity": "Low",
          "remediation": "Enable point-in-time recovery for critical tables",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add point-in-time recovery configuration"
      ]
    },
    {
      "vulnerabilityId": "dynamodb-no-encryption-1756421262543",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A02-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A02",
            "title": "Cryptographic Failures",
            "description": "Protect data in transit and at rest with strong cryptography",
            "category": "Cryptography",
            "requirements": [
              "Encrypt sensitive data at rest",
              "Encrypt data in transit",
              "Use strong cryptographic algorithms"
            ],
            "testProcedures": [
              "Verify encryption implementation",
              "Test key management practices",
              "Review cryptographic standards"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No customer-managed encryption configuration found"
          ],
          "gaps": [
            "Vulnerability found: DynamoDB Table Without Customer-Managed Encryption"
          ],
          "remediation": [
            "Evaluate if customer-managed encryption is required"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A02-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "DynamoDB table uses default encryption instead of customer-managed keys",
          "severity": "Medium",
          "remediation": "Consider using customer-managed KMS keys for enhanced security",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Evaluate if customer-managed encryption is required"
      ]
    },
    {
      "vulnerabilityId": "dynamodb-no-pitr-1756421262543",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No point-in-time recovery configuration found"
          ],
          "gaps": [
            "Vulnerability found: DynamoDB Table Without Point-in-Time Recovery"
          ],
          "remediation": [
            "Add point-in-time recovery configuration"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "DynamoDB table does not have point-in-time recovery enabled",
          "severity": "Low",
          "remediation": "Enable point-in-time recovery for critical tables",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add point-in-time recovery configuration"
      ]
    },
    {
      "vulnerabilityId": "dynamodb-no-pitr-1756421262543",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A05-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A05",
            "title": "Security Misconfiguration",
            "description": "Secure configuration of all components",
            "category": "Configuration",
            "requirements": [
              "Implement secure configuration baselines",
              "Regular configuration reviews",
              "Automated configuration compliance"
            ],
            "testProcedures": [
              "Review security configurations",
              "Test default configurations",
              "Verify hardening procedures"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No point-in-time recovery configuration found"
          ],
          "gaps": [
            "Vulnerability found: DynamoDB Table Without Point-in-Time Recovery"
          ],
          "remediation": [
            "Add point-in-time recovery configuration"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A05-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "DynamoDB table does not have point-in-time recovery enabled",
          "severity": "Low",
          "remediation": "Enable point-in-time recovery for critical tables",
          "timeline": "Within 1 month",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add point-in-time recovery configuration"
      ]
    },
    {
      "vulnerabilityId": "cognito-no-mfa-1756421262543",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A07-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A07",
            "title": "Identification and Authentication Failures",
            "description": "Proper authentication and session management",
            "category": "Authentication",
            "requirements": [
              "Implement strong authentication",
              "Use multi-factor authentication",
              "Proper session management"
            ],
            "testProcedures": [
              "Test authentication mechanisms",
              "Verify MFA implementation",
              "Review session handling"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No MFA configuration found"
          ],
          "gaps": [
            "Vulnerability found: Cognito User Pool Without MFA Configuration"
          ],
          "remediation": [
            "Add MFA configuration to user pool"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A07-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "Cognito User Pool does not have multi-factor authentication configured",
          "severity": "Medium",
          "remediation": "Configure multi-factor authentication options",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add MFA configuration to user pool"
      ]
    },
    {
      "vulnerabilityId": "cognito-no-mfa-1756421262543",
      "mappedControls": [
        {
          "control": {
            "id": "OWASP-A07-2021",
            "framework": "OWASP Top 10",
            "controlNumber": "A07",
            "title": "Identification and Authentication Failures",
            "description": "Proper authentication and session management",
            "category": "Authentication",
            "requirements": [
              "Implement strong authentication",
              "Use multi-factor authentication",
              "Proper session management"
            ],
            "testProcedures": [
              "Test authentication mechanisms",
              "Verify MFA implementation",
              "Review session handling"
            ]
          },
          "status": "Non-Compliant",
          "evidence": [
            "No MFA configuration found"
          ],
          "gaps": [
            "Vulnerability found: Cognito User Pool Without MFA Configuration"
          ],
          "remediation": [
            "Add MFA configuration to user pool"
          ]
        }
      ],
      "overallStatus": "Non-Compliant",
      "gapAnalysis": [
        {
          "controlId": "OWASP-A07-2021",
          "framework": "OWASP Top 10",
          "gapDescription": "Cognito User Pool does not have multi-factor authentication configured",
          "severity": "Medium",
          "remediation": "Configure multi-factor authentication options",
          "timeline": "Within 2 weeks",
          "owner": "Infrastructure Team"
        }
      ],
      "recommendedActions": [
        "Add MFA configuration to user pool"
      ]
    }
  ],
  "errors": [],
  "metadata": {
    "scanDuration": 68,
    "memoryUsage": 27659488,
    "rulesApplied": 15,
    "falsePositiveFiltered": 0,
    "confidence": 100
  }
}